// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_Map.pb.h"

@implementation PpMapRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpMapRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_Map ()
@property (retain) NSString* mapName;
@property int32_t mapId;
@property int32_t mapNationId;
@property int32_t mapRealId;
@property int32_t playerNum;
@property Float64 ltLongitude;
@property Float64 ltLatitude;
@property Float64 rbLongitude;
@property Float64 rbLatitude;
@property int32_t updateTime;
@end

@implementation PP_Map

- (BOOL) hasMapName {
  return !!hasMapName_;
}
- (void) setHasMapName:(BOOL) value_ {
  hasMapName_ = !!value_;
}
@synthesize mapName;
- (BOOL) hasMapId {
  return !!hasMapId_;
}
- (void) setHasMapId:(BOOL) value_ {
  hasMapId_ = !!value_;
}
@synthesize mapId;
- (BOOL) hasMapNationId {
  return !!hasMapNationId_;
}
- (void) setHasMapNationId:(BOOL) value_ {
  hasMapNationId_ = !!value_;
}
@synthesize mapNationId;
- (BOOL) hasMapRealId {
  return !!hasMapRealId_;
}
- (void) setHasMapRealId:(BOOL) value_ {
  hasMapRealId_ = !!value_;
}
@synthesize mapRealId;
- (BOOL) hasPlayerNum {
  return !!hasPlayerNum_;
}
- (void) setHasPlayerNum:(BOOL) value_ {
  hasPlayerNum_ = !!value_;
}
@synthesize playerNum;
- (BOOL) hasLtLongitude {
  return !!hasLtLongitude_;
}
- (void) setHasLtLongitude:(BOOL) value_ {
  hasLtLongitude_ = !!value_;
}
@synthesize ltLongitude;
- (BOOL) hasLtLatitude {
  return !!hasLtLatitude_;
}
- (void) setHasLtLatitude:(BOOL) value_ {
  hasLtLatitude_ = !!value_;
}
@synthesize ltLatitude;
- (BOOL) hasRbLongitude {
  return !!hasRbLongitude_;
}
- (void) setHasRbLongitude:(BOOL) value_ {
  hasRbLongitude_ = !!value_;
}
@synthesize rbLongitude;
- (BOOL) hasRbLatitude {
  return !!hasRbLatitude_;
}
- (void) setHasRbLatitude:(BOOL) value_ {
  hasRbLatitude_ = !!value_;
}
@synthesize rbLatitude;
- (BOOL) hasUpdateTime {
  return !!hasUpdateTime_;
}
- (void) setHasUpdateTime:(BOOL) value_ {
  hasUpdateTime_ = !!value_;
}
@synthesize updateTime;
- (void) dealloc {
  self.mapName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.mapName = @"";
    self.mapId = 0;
    self.mapNationId = 0;
    self.mapRealId = 0;
    self.playerNum = 0;
    self.ltLongitude = 0;
    self.ltLatitude = 0;
    self.rbLongitude = 0;
    self.rbLatitude = 0;
    self.updateTime = 0;
  }
  return self;
}
static PP_Map* defaultPP_MapInstance = nil;
+ (void) initialize {
  if (self == [PP_Map class]) {
    defaultPP_MapInstance = [[PP_Map alloc] init];
  }
}
+ (PP_Map*) defaultInstance {
  return defaultPP_MapInstance;
}
- (PP_Map*) defaultInstance {
  return defaultPP_MapInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMapName) {
    [output writeString:1 value:self.mapName];
  }
  if (self.hasMapId) {
    [output writeInt32:2 value:self.mapId];
  }
  if (self.hasMapNationId) {
    [output writeInt32:3 value:self.mapNationId];
  }
  if (self.hasMapRealId) {
    [output writeInt32:4 value:self.mapRealId];
  }
  if (self.hasPlayerNum) {
    [output writeInt32:5 value:self.playerNum];
  }
  if (self.hasLtLongitude) {
    [output writeDouble:6 value:self.ltLongitude];
  }
  if (self.hasLtLatitude) {
    [output writeDouble:7 value:self.ltLatitude];
  }
  if (self.hasRbLongitude) {
    [output writeDouble:8 value:self.rbLongitude];
  }
  if (self.hasRbLatitude) {
    [output writeDouble:9 value:self.rbLatitude];
  }
  if (self.hasUpdateTime) {
    [output writeInt32:10 value:self.updateTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMapName) {
    size_ += computeStringSize(1, self.mapName);
  }
  if (self.hasMapId) {
    size_ += computeInt32Size(2, self.mapId);
  }
  if (self.hasMapNationId) {
    size_ += computeInt32Size(3, self.mapNationId);
  }
  if (self.hasMapRealId) {
    size_ += computeInt32Size(4, self.mapRealId);
  }
  if (self.hasPlayerNum) {
    size_ += computeInt32Size(5, self.playerNum);
  }
  if (self.hasLtLongitude) {
    size_ += computeDoubleSize(6, self.ltLongitude);
  }
  if (self.hasLtLatitude) {
    size_ += computeDoubleSize(7, self.ltLatitude);
  }
  if (self.hasRbLongitude) {
    size_ += computeDoubleSize(8, self.rbLongitude);
  }
  if (self.hasRbLatitude) {
    size_ += computeDoubleSize(9, self.rbLatitude);
  }
  if (self.hasUpdateTime) {
    size_ += computeInt32Size(10, self.updateTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_Map*) parseFromData:(NSData*) data {
  return (PP_Map*)[[[PP_Map builder] mergeFromData:data] build];
}
+ (PP_Map*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Map*)[[[PP_Map builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_Map*) parseFromInputStream:(NSInputStream*) input {
  return (PP_Map*)[[[PP_Map builder] mergeFromInputStream:input] build];
}
+ (PP_Map*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Map*)[[[PP_Map builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Map*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_Map*)[[[PP_Map builder] mergeFromCodedInputStream:input] build];
}
+ (PP_Map*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Map*)[[[PP_Map builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Map_Builder*) builder {
  return [[[PP_Map_Builder alloc] init] autorelease];
}
+ (PP_Map_Builder*) builderWithPrototype:(PP_Map*) prototype {
  return [[PP_Map builder] mergeFrom:prototype];
}
- (PP_Map_Builder*) builder {
  return [PP_Map builder];
}
- (PP_Map_Builder*) toBuilder {
  return [PP_Map builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMapName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mapName", self.mapName];
  }
  if (self.hasMapId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mapId", [NSNumber numberWithInt:self.mapId]];
  }
  if (self.hasMapNationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mapNationId", [NSNumber numberWithInt:self.mapNationId]];
  }
  if (self.hasMapRealId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mapRealId", [NSNumber numberWithInt:self.mapRealId]];
  }
  if (self.hasPlayerNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerNum", [NSNumber numberWithInt:self.playerNum]];
  }
  if (self.hasLtLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ltLongitude", [NSNumber numberWithDouble:self.ltLongitude]];
  }
  if (self.hasLtLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ltLatitude", [NSNumber numberWithDouble:self.ltLatitude]];
  }
  if (self.hasRbLongitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rbLongitude", [NSNumber numberWithDouble:self.rbLongitude]];
  }
  if (self.hasRbLatitude) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rbLatitude", [NSNumber numberWithDouble:self.rbLatitude]];
  }
  if (self.hasUpdateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"updateTime", [NSNumber numberWithInt:self.updateTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_Map class]]) {
    return NO;
  }
  PP_Map *otherMessage = other;
  return
      self.hasMapName == otherMessage.hasMapName &&
      (!self.hasMapName || [self.mapName isEqual:otherMessage.mapName]) &&
      self.hasMapId == otherMessage.hasMapId &&
      (!self.hasMapId || self.mapId == otherMessage.mapId) &&
      self.hasMapNationId == otherMessage.hasMapNationId &&
      (!self.hasMapNationId || self.mapNationId == otherMessage.mapNationId) &&
      self.hasMapRealId == otherMessage.hasMapRealId &&
      (!self.hasMapRealId || self.mapRealId == otherMessage.mapRealId) &&
      self.hasPlayerNum == otherMessage.hasPlayerNum &&
      (!self.hasPlayerNum || self.playerNum == otherMessage.playerNum) &&
      self.hasLtLongitude == otherMessage.hasLtLongitude &&
      (!self.hasLtLongitude || self.ltLongitude == otherMessage.ltLongitude) &&
      self.hasLtLatitude == otherMessage.hasLtLatitude &&
      (!self.hasLtLatitude || self.ltLatitude == otherMessage.ltLatitude) &&
      self.hasRbLongitude == otherMessage.hasRbLongitude &&
      (!self.hasRbLongitude || self.rbLongitude == otherMessage.rbLongitude) &&
      self.hasRbLatitude == otherMessage.hasRbLatitude &&
      (!self.hasRbLatitude || self.rbLatitude == otherMessage.rbLatitude) &&
      self.hasUpdateTime == otherMessage.hasUpdateTime &&
      (!self.hasUpdateTime || self.updateTime == otherMessage.updateTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasMapName) {
    hashCode = hashCode * 31 + [self.mapName hash];
  }
  if (self.hasMapId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.mapId] hash];
  }
  if (self.hasMapNationId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.mapNationId] hash];
  }
  if (self.hasMapRealId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.mapRealId] hash];
  }
  if (self.hasPlayerNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.playerNum] hash];
  }
  if (self.hasLtLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ltLongitude] hash];
  }
  if (self.hasLtLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.ltLatitude] hash];
  }
  if (self.hasRbLongitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.rbLongitude] hash];
  }
  if (self.hasRbLatitude) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.rbLatitude] hash];
  }
  if (self.hasUpdateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.updateTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_Map_Builder()
@property (retain) PP_Map* result;
@end

@implementation PP_Map_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_Map alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_Map_Builder*) clear {
  self.result = [[[PP_Map alloc] init] autorelease];
  return self;
}
- (PP_Map_Builder*) clone {
  return [PP_Map builderWithPrototype:result];
}
- (PP_Map*) defaultInstance {
  return [PP_Map defaultInstance];
}
- (PP_Map*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_Map*) buildPartial {
  PP_Map* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_Map_Builder*) mergeFrom:(PP_Map*) other {
  if (other == [PP_Map defaultInstance]) {
    return self;
  }
  if (other.hasMapName) {
    [self setMapName:other.mapName];
  }
  if (other.hasMapId) {
    [self setMapId:other.mapId];
  }
  if (other.hasMapNationId) {
    [self setMapNationId:other.mapNationId];
  }
  if (other.hasMapRealId) {
    [self setMapRealId:other.mapRealId];
  }
  if (other.hasPlayerNum) {
    [self setPlayerNum:other.playerNum];
  }
  if (other.hasLtLongitude) {
    [self setLtLongitude:other.ltLongitude];
  }
  if (other.hasLtLatitude) {
    [self setLtLatitude:other.ltLatitude];
  }
  if (other.hasRbLongitude) {
    [self setRbLongitude:other.rbLongitude];
  }
  if (other.hasRbLatitude) {
    [self setRbLatitude:other.rbLatitude];
  }
  if (other.hasUpdateTime) {
    [self setUpdateTime:other.updateTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_Map_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_Map_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMapName:[input readString]];
        break;
      }
      case 16: {
        [self setMapId:[input readInt32]];
        break;
      }
      case 24: {
        [self setMapNationId:[input readInt32]];
        break;
      }
      case 32: {
        [self setMapRealId:[input readInt32]];
        break;
      }
      case 40: {
        [self setPlayerNum:[input readInt32]];
        break;
      }
      case 49: {
        [self setLtLongitude:[input readDouble]];
        break;
      }
      case 57: {
        [self setLtLatitude:[input readDouble]];
        break;
      }
      case 65: {
        [self setRbLongitude:[input readDouble]];
        break;
      }
      case 73: {
        [self setRbLatitude:[input readDouble]];
        break;
      }
      case 80: {
        [self setUpdateTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMapName {
  return result.hasMapName;
}
- (NSString*) mapName {
  return result.mapName;
}
- (PP_Map_Builder*) setMapName:(NSString*) value {
  result.hasMapName = YES;
  result.mapName = value;
  return self;
}
- (PP_Map_Builder*) clearMapName {
  result.hasMapName = NO;
  result.mapName = @"";
  return self;
}
- (BOOL) hasMapId {
  return result.hasMapId;
}
- (int32_t) mapId {
  return result.mapId;
}
- (PP_Map_Builder*) setMapId:(int32_t) value {
  result.hasMapId = YES;
  result.mapId = value;
  return self;
}
- (PP_Map_Builder*) clearMapId {
  result.hasMapId = NO;
  result.mapId = 0;
  return self;
}
- (BOOL) hasMapNationId {
  return result.hasMapNationId;
}
- (int32_t) mapNationId {
  return result.mapNationId;
}
- (PP_Map_Builder*) setMapNationId:(int32_t) value {
  result.hasMapNationId = YES;
  result.mapNationId = value;
  return self;
}
- (PP_Map_Builder*) clearMapNationId {
  result.hasMapNationId = NO;
  result.mapNationId = 0;
  return self;
}
- (BOOL) hasMapRealId {
  return result.hasMapRealId;
}
- (int32_t) mapRealId {
  return result.mapRealId;
}
- (PP_Map_Builder*) setMapRealId:(int32_t) value {
  result.hasMapRealId = YES;
  result.mapRealId = value;
  return self;
}
- (PP_Map_Builder*) clearMapRealId {
  result.hasMapRealId = NO;
  result.mapRealId = 0;
  return self;
}
- (BOOL) hasPlayerNum {
  return result.hasPlayerNum;
}
- (int32_t) playerNum {
  return result.playerNum;
}
- (PP_Map_Builder*) setPlayerNum:(int32_t) value {
  result.hasPlayerNum = YES;
  result.playerNum = value;
  return self;
}
- (PP_Map_Builder*) clearPlayerNum {
  result.hasPlayerNum = NO;
  result.playerNum = 0;
  return self;
}
- (BOOL) hasLtLongitude {
  return result.hasLtLongitude;
}
- (Float64) ltLongitude {
  return result.ltLongitude;
}
- (PP_Map_Builder*) setLtLongitude:(Float64) value {
  result.hasLtLongitude = YES;
  result.ltLongitude = value;
  return self;
}
- (PP_Map_Builder*) clearLtLongitude {
  result.hasLtLongitude = NO;
  result.ltLongitude = 0;
  return self;
}
- (BOOL) hasLtLatitude {
  return result.hasLtLatitude;
}
- (Float64) ltLatitude {
  return result.ltLatitude;
}
- (PP_Map_Builder*) setLtLatitude:(Float64) value {
  result.hasLtLatitude = YES;
  result.ltLatitude = value;
  return self;
}
- (PP_Map_Builder*) clearLtLatitude {
  result.hasLtLatitude = NO;
  result.ltLatitude = 0;
  return self;
}
- (BOOL) hasRbLongitude {
  return result.hasRbLongitude;
}
- (Float64) rbLongitude {
  return result.rbLongitude;
}
- (PP_Map_Builder*) setRbLongitude:(Float64) value {
  result.hasRbLongitude = YES;
  result.rbLongitude = value;
  return self;
}
- (PP_Map_Builder*) clearRbLongitude {
  result.hasRbLongitude = NO;
  result.rbLongitude = 0;
  return self;
}
- (BOOL) hasRbLatitude {
  return result.hasRbLatitude;
}
- (Float64) rbLatitude {
  return result.rbLatitude;
}
- (PP_Map_Builder*) setRbLatitude:(Float64) value {
  result.hasRbLatitude = YES;
  result.rbLatitude = value;
  return self;
}
- (PP_Map_Builder*) clearRbLatitude {
  result.hasRbLatitude = NO;
  result.rbLatitude = 0;
  return self;
}
- (BOOL) hasUpdateTime {
  return result.hasUpdateTime;
}
- (int32_t) updateTime {
  return result.updateTime;
}
- (PP_Map_Builder*) setUpdateTime:(int32_t) value {
  result.hasUpdateTime = YES;
  result.updateTime = value;
  return self;
}
- (PP_Map_Builder*) clearUpdateTime {
  result.hasUpdateTime = NO;
  result.updateTime = 0;
  return self;
}
@end

