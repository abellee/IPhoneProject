// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_Task_Require.pb.h"

@implementation PpTaskRequireRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpTaskRequireRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_Task_Require ()
@property int32_t taskId;
@property int32_t requireType;
@property int32_t requireId;
@property int32_t requireNum;
@end

@implementation PP_Task_Require

- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasRequireType {
  return !!hasRequireType_;
}
- (void) setHasRequireType:(BOOL) value_ {
  hasRequireType_ = !!value_;
}
@synthesize requireType;
- (BOOL) hasRequireId {
  return !!hasRequireId_;
}
- (void) setHasRequireId:(BOOL) value_ {
  hasRequireId_ = !!value_;
}
@synthesize requireId;
- (BOOL) hasRequireNum {
  return !!hasRequireNum_;
}
- (void) setHasRequireNum:(BOOL) value_ {
  hasRequireNum_ = !!value_;
}
@synthesize requireNum;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.taskId = 0;
    self.requireType = 0;
    self.requireId = 0;
    self.requireNum = 0;
  }
  return self;
}
static PP_Task_Require* defaultPP_Task_RequireInstance = nil;
+ (void) initialize {
  if (self == [PP_Task_Require class]) {
    defaultPP_Task_RequireInstance = [[PP_Task_Require alloc] init];
  }
}
+ (PP_Task_Require*) defaultInstance {
  return defaultPP_Task_RequireInstance;
}
- (PP_Task_Require*) defaultInstance {
  return defaultPP_Task_RequireInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskId) {
    [output writeInt32:1 value:self.taskId];
  }
  if (self.hasRequireType) {
    [output writeInt32:2 value:self.requireType];
  }
  if (self.hasRequireId) {
    [output writeInt32:3 value:self.requireId];
  }
  if (self.hasRequireNum) {
    [output writeInt32:4 value:self.requireNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskId) {
    size_ += computeInt32Size(1, self.taskId);
  }
  if (self.hasRequireType) {
    size_ += computeInt32Size(2, self.requireType);
  }
  if (self.hasRequireId) {
    size_ += computeInt32Size(3, self.requireId);
  }
  if (self.hasRequireNum) {
    size_ += computeInt32Size(4, self.requireNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_Task_Require*) parseFromData:(NSData*) data {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromData:data] build];
}
+ (PP_Task_Require*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_Task_Require*) parseFromInputStream:(NSInputStream*) input {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromInputStream:input] build];
}
+ (PP_Task_Require*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Task_Require*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromCodedInputStream:input] build];
}
+ (PP_Task_Require*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task_Require*)[[[PP_Task_Require builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Task_Require_Builder*) builder {
  return [[[PP_Task_Require_Builder alloc] init] autorelease];
}
+ (PP_Task_Require_Builder*) builderWithPrototype:(PP_Task_Require*) prototype {
  return [[PP_Task_Require builder] mergeFrom:prototype];
}
- (PP_Task_Require_Builder*) builder {
  return [PP_Task_Require builder];
}
- (PP_Task_Require_Builder*) toBuilder {
  return [PP_Task_Require builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInt:self.taskId]];
  }
  if (self.hasRequireType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireType", [NSNumber numberWithInt:self.requireType]];
  }
  if (self.hasRequireId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireId", [NSNumber numberWithInt:self.requireId]];
  }
  if (self.hasRequireNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireNum", [NSNumber numberWithInt:self.requireNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_Task_Require class]]) {
    return NO;
  }
  PP_Task_Require *otherMessage = other;
  return
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasRequireType == otherMessage.hasRequireType &&
      (!self.hasRequireType || self.requireType == otherMessage.requireType) &&
      self.hasRequireId == otherMessage.hasRequireId &&
      (!self.hasRequireId || self.requireId == otherMessage.requireId) &&
      self.hasRequireNum == otherMessage.hasRequireNum &&
      (!self.hasRequireNum || self.requireNum == otherMessage.requireNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskId] hash];
  }
  if (self.hasRequireType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireType] hash];
  }
  if (self.hasRequireId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireId] hash];
  }
  if (self.hasRequireNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_Task_Require_Builder()
@property (retain) PP_Task_Require* result;
@end

@implementation PP_Task_Require_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_Task_Require alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_Task_Require_Builder*) clear {
  self.result = [[[PP_Task_Require alloc] init] autorelease];
  return self;
}
- (PP_Task_Require_Builder*) clone {
  return [PP_Task_Require builderWithPrototype:result];
}
- (PP_Task_Require*) defaultInstance {
  return [PP_Task_Require defaultInstance];
}
- (PP_Task_Require*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_Task_Require*) buildPartial {
  PP_Task_Require* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_Task_Require_Builder*) mergeFrom:(PP_Task_Require*) other {
  if (other == [PP_Task_Require defaultInstance]) {
    return self;
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasRequireType) {
    [self setRequireType:other.requireType];
  }
  if (other.hasRequireId) {
    [self setRequireId:other.requireId];
  }
  if (other.hasRequireNum) {
    [self setRequireNum:other.requireNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_Task_Require_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_Task_Require_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 16: {
        [self setRequireType:[input readInt32]];
        break;
      }
      case 24: {
        [self setRequireId:[input readInt32]];
        break;
      }
      case 32: {
        [self setRequireNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (PP_Task_Require_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (PP_Task_Require_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasRequireType {
  return result.hasRequireType;
}
- (int32_t) requireType {
  return result.requireType;
}
- (PP_Task_Require_Builder*) setRequireType:(int32_t) value {
  result.hasRequireType = YES;
  result.requireType = value;
  return self;
}
- (PP_Task_Require_Builder*) clearRequireType {
  result.hasRequireType = NO;
  result.requireType = 0;
  return self;
}
- (BOOL) hasRequireId {
  return result.hasRequireId;
}
- (int32_t) requireId {
  return result.requireId;
}
- (PP_Task_Require_Builder*) setRequireId:(int32_t) value {
  result.hasRequireId = YES;
  result.requireId = value;
  return self;
}
- (PP_Task_Require_Builder*) clearRequireId {
  result.hasRequireId = NO;
  result.requireId = 0;
  return self;
}
- (BOOL) hasRequireNum {
  return result.hasRequireNum;
}
- (int32_t) requireNum {
  return result.requireNum;
}
- (PP_Task_Require_Builder*) setRequireNum:(int32_t) value {
  result.hasRequireNum = YES;
  result.requireNum = value;
  return self;
}
- (PP_Task_Require_Builder*) clearRequireNum {
  result.hasRequireNum = NO;
  result.requireNum = 0;
  return self;
}
@end

