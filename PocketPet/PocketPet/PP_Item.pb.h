// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import <ProtocolBuffers/ProtocolBuffers.h>

@class PP_Item;
@class PP_Item_Builder;
#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif


@interface PpItemRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface PP_Item : PBGeneratedMessage {
@private
  BOOL hasItemMagicDefense_:1;
  BOOL hasItemAttackLevel_:1;
  BOOL hasItemDefenseLevel_:1;
  BOOL hasItemMagicLevel_:1;
  BOOL hasItemMagicDefenseLevel_:1;
  BOOL hasParentType_:1;
  BOOL hasItemType_:1;
  BOOL hasItemInvalidTime_:1;
  BOOL hasVersion_:1;
  BOOL hasTokenPrice_:1;
  BOOL hasCoinPrice_:1;
  BOOL hasItemElement_:1;
  BOOL hasIsShop_:1;
  BOOL hasCanTrade_:1;
  BOOL hasCanSell_:1;
  BOOL hasCanUpgrade_:1;
  BOOL hasCanComposition_:1;
  BOOL hasMaxNum_:1;
  BOOL hasItemId_:1;
  BOOL hasItemLevel_:1;
  BOOL hasItemReqLevel_:1;
  BOOL hasItemAttack_:1;
  BOOL hasItemMagic_:1;
  BOOL hasItemHp_:1;
  BOOL hasItemMp_:1;
  BOOL hasItemLife_:1;
  BOOL hasItemFeel_:1;
  BOOL hasItemExp_:1;
  BOOL hasItemVariationRate_:1;
  BOOL hasItemPower_:1;
  BOOL hasItemAgile_:1;
  BOOL hasItemIntelligence_:1;
  BOOL hasItemVigour_:1;
  BOOL hasItemEndur_:1;
  BOOL hasItemDefense_:1;
  BOOL hasItemName_:1;
  int32_t itemMagicDefense;
  int32_t itemAttackLevel;
  int32_t itemDefenseLevel;
  int32_t itemMagicLevel;
  int32_t itemMagicDefenseLevel;
  int32_t parentType;
  int32_t itemType;
  int32_t itemInvalidTime;
  int32_t version;
  int32_t tokenPrice;
  int32_t coinPrice;
  int32_t itemElement;
  int32_t isShop;
  int32_t canTrade;
  int32_t canSell;
  int32_t canUpgrade;
  int32_t canComposition;
  int32_t maxNum;
  int32_t itemId;
  int32_t itemLevel;
  int32_t itemReqLevel;
  int32_t itemAttack;
  int32_t itemMagic;
  int32_t itemHp;
  int32_t itemMp;
  int32_t itemLife;
  int32_t itemFeel;
  int32_t itemExp;
  int32_t itemVariationRate;
  int32_t itemPower;
  int32_t itemAgile;
  int32_t itemIntelligence;
  int32_t itemVigour;
  int32_t itemEndur;
  int32_t itemDefense;
  NSString* itemName;
}
- (BOOL) hasItemId;
- (BOOL) hasItemName;
- (BOOL) hasItemLevel;
- (BOOL) hasItemReqLevel;
- (BOOL) hasItemAttack;
- (BOOL) hasItemMagic;
- (BOOL) hasItemHp;
- (BOOL) hasItemMp;
- (BOOL) hasItemLife;
- (BOOL) hasItemFeel;
- (BOOL) hasItemExp;
- (BOOL) hasItemVariationRate;
- (BOOL) hasItemPower;
- (BOOL) hasItemAgile;
- (BOOL) hasItemIntelligence;
- (BOOL) hasItemVigour;
- (BOOL) hasItemEndur;
- (BOOL) hasItemDefense;
- (BOOL) hasItemMagicDefense;
- (BOOL) hasItemAttackLevel;
- (BOOL) hasItemDefenseLevel;
- (BOOL) hasItemMagicLevel;
- (BOOL) hasItemMagicDefenseLevel;
- (BOOL) hasParentType;
- (BOOL) hasItemType;
- (BOOL) hasItemInvalidTime;
- (BOOL) hasVersion;
- (BOOL) hasTokenPrice;
- (BOOL) hasCoinPrice;
- (BOOL) hasItemElement;
- (BOOL) hasIsShop;
- (BOOL) hasCanTrade;
- (BOOL) hasCanSell;
- (BOOL) hasCanUpgrade;
- (BOOL) hasCanComposition;
- (BOOL) hasMaxNum;
@property (readonly) int32_t itemId;
@property (readonly, retain) NSString* itemName;
@property (readonly) int32_t itemLevel;
@property (readonly) int32_t itemReqLevel;
@property (readonly) int32_t itemAttack;
@property (readonly) int32_t itemMagic;
@property (readonly) int32_t itemHp;
@property (readonly) int32_t itemMp;
@property (readonly) int32_t itemLife;
@property (readonly) int32_t itemFeel;
@property (readonly) int32_t itemExp;
@property (readonly) int32_t itemVariationRate;
@property (readonly) int32_t itemPower;
@property (readonly) int32_t itemAgile;
@property (readonly) int32_t itemIntelligence;
@property (readonly) int32_t itemVigour;
@property (readonly) int32_t itemEndur;
@property (readonly) int32_t itemDefense;
@property (readonly) int32_t itemMagicDefense;
@property (readonly) int32_t itemAttackLevel;
@property (readonly) int32_t itemDefenseLevel;
@property (readonly) int32_t itemMagicLevel;
@property (readonly) int32_t itemMagicDefenseLevel;
@property (readonly) int32_t parentType;
@property (readonly) int32_t itemType;
@property (readonly) int32_t itemInvalidTime;
@property (readonly) int32_t version;
@property (readonly) int32_t tokenPrice;
@property (readonly) int32_t coinPrice;
@property (readonly) int32_t itemElement;
@property (readonly) int32_t isShop;
@property (readonly) int32_t canTrade;
@property (readonly) int32_t canSell;
@property (readonly) int32_t canUpgrade;
@property (readonly) int32_t canComposition;
@property (readonly) int32_t maxNum;

+ (PP_Item*) defaultInstance;
- (PP_Item*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (PP_Item_Builder*) builder;
+ (PP_Item_Builder*) builder;
+ (PP_Item_Builder*) builderWithPrototype:(PP_Item*) prototype;
- (PP_Item_Builder*) toBuilder;

+ (PP_Item*) parseFromData:(NSData*) data;
+ (PP_Item*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PP_Item*) parseFromInputStream:(NSInputStream*) input;
+ (PP_Item*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (PP_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (PP_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface PP_Item_Builder : PBGeneratedMessage_Builder {
@private
  PP_Item* result;
}

- (PP_Item*) defaultInstance;

- (PP_Item_Builder*) clear;
- (PP_Item_Builder*) clone;

- (PP_Item*) build;
- (PP_Item*) buildPartial;

- (PP_Item_Builder*) mergeFrom:(PP_Item*) other;
- (PP_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (PP_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasItemId;
- (int32_t) itemId;
- (PP_Item_Builder*) setItemId:(int32_t) value;
- (PP_Item_Builder*) clearItemId;

- (BOOL) hasItemName;
- (NSString*) itemName;
- (PP_Item_Builder*) setItemName:(NSString*) value;
- (PP_Item_Builder*) clearItemName;

- (BOOL) hasItemLevel;
- (int32_t) itemLevel;
- (PP_Item_Builder*) setItemLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemLevel;

- (BOOL) hasItemReqLevel;
- (int32_t) itemReqLevel;
- (PP_Item_Builder*) setItemReqLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemReqLevel;

- (BOOL) hasItemAttack;
- (int32_t) itemAttack;
- (PP_Item_Builder*) setItemAttack:(int32_t) value;
- (PP_Item_Builder*) clearItemAttack;

- (BOOL) hasItemMagic;
- (int32_t) itemMagic;
- (PP_Item_Builder*) setItemMagic:(int32_t) value;
- (PP_Item_Builder*) clearItemMagic;

- (BOOL) hasItemHp;
- (int32_t) itemHp;
- (PP_Item_Builder*) setItemHp:(int32_t) value;
- (PP_Item_Builder*) clearItemHp;

- (BOOL) hasItemMp;
- (int32_t) itemMp;
- (PP_Item_Builder*) setItemMp:(int32_t) value;
- (PP_Item_Builder*) clearItemMp;

- (BOOL) hasItemLife;
- (int32_t) itemLife;
- (PP_Item_Builder*) setItemLife:(int32_t) value;
- (PP_Item_Builder*) clearItemLife;

- (BOOL) hasItemFeel;
- (int32_t) itemFeel;
- (PP_Item_Builder*) setItemFeel:(int32_t) value;
- (PP_Item_Builder*) clearItemFeel;

- (BOOL) hasItemExp;
- (int32_t) itemExp;
- (PP_Item_Builder*) setItemExp:(int32_t) value;
- (PP_Item_Builder*) clearItemExp;

- (BOOL) hasItemVariationRate;
- (int32_t) itemVariationRate;
- (PP_Item_Builder*) setItemVariationRate:(int32_t) value;
- (PP_Item_Builder*) clearItemVariationRate;

- (BOOL) hasItemPower;
- (int32_t) itemPower;
- (PP_Item_Builder*) setItemPower:(int32_t) value;
- (PP_Item_Builder*) clearItemPower;

- (BOOL) hasItemAgile;
- (int32_t) itemAgile;
- (PP_Item_Builder*) setItemAgile:(int32_t) value;
- (PP_Item_Builder*) clearItemAgile;

- (BOOL) hasItemIntelligence;
- (int32_t) itemIntelligence;
- (PP_Item_Builder*) setItemIntelligence:(int32_t) value;
- (PP_Item_Builder*) clearItemIntelligence;

- (BOOL) hasItemVigour;
- (int32_t) itemVigour;
- (PP_Item_Builder*) setItemVigour:(int32_t) value;
- (PP_Item_Builder*) clearItemVigour;

- (BOOL) hasItemEndur;
- (int32_t) itemEndur;
- (PP_Item_Builder*) setItemEndur:(int32_t) value;
- (PP_Item_Builder*) clearItemEndur;

- (BOOL) hasItemDefense;
- (int32_t) itemDefense;
- (PP_Item_Builder*) setItemDefense:(int32_t) value;
- (PP_Item_Builder*) clearItemDefense;

- (BOOL) hasItemMagicDefense;
- (int32_t) itemMagicDefense;
- (PP_Item_Builder*) setItemMagicDefense:(int32_t) value;
- (PP_Item_Builder*) clearItemMagicDefense;

- (BOOL) hasItemAttackLevel;
- (int32_t) itemAttackLevel;
- (PP_Item_Builder*) setItemAttackLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemAttackLevel;

- (BOOL) hasItemDefenseLevel;
- (int32_t) itemDefenseLevel;
- (PP_Item_Builder*) setItemDefenseLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemDefenseLevel;

- (BOOL) hasItemMagicLevel;
- (int32_t) itemMagicLevel;
- (PP_Item_Builder*) setItemMagicLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemMagicLevel;

- (BOOL) hasItemMagicDefenseLevel;
- (int32_t) itemMagicDefenseLevel;
- (PP_Item_Builder*) setItemMagicDefenseLevel:(int32_t) value;
- (PP_Item_Builder*) clearItemMagicDefenseLevel;

- (BOOL) hasParentType;
- (int32_t) parentType;
- (PP_Item_Builder*) setParentType:(int32_t) value;
- (PP_Item_Builder*) clearParentType;

- (BOOL) hasItemType;
- (int32_t) itemType;
- (PP_Item_Builder*) setItemType:(int32_t) value;
- (PP_Item_Builder*) clearItemType;

- (BOOL) hasItemInvalidTime;
- (int32_t) itemInvalidTime;
- (PP_Item_Builder*) setItemInvalidTime:(int32_t) value;
- (PP_Item_Builder*) clearItemInvalidTime;

- (BOOL) hasVersion;
- (int32_t) version;
- (PP_Item_Builder*) setVersion:(int32_t) value;
- (PP_Item_Builder*) clearVersion;

- (BOOL) hasTokenPrice;
- (int32_t) tokenPrice;
- (PP_Item_Builder*) setTokenPrice:(int32_t) value;
- (PP_Item_Builder*) clearTokenPrice;

- (BOOL) hasCoinPrice;
- (int32_t) coinPrice;
- (PP_Item_Builder*) setCoinPrice:(int32_t) value;
- (PP_Item_Builder*) clearCoinPrice;

- (BOOL) hasItemElement;
- (int32_t) itemElement;
- (PP_Item_Builder*) setItemElement:(int32_t) value;
- (PP_Item_Builder*) clearItemElement;

- (BOOL) hasIsShop;
- (int32_t) isShop;
- (PP_Item_Builder*) setIsShop:(int32_t) value;
- (PP_Item_Builder*) clearIsShop;

- (BOOL) hasCanTrade;
- (int32_t) canTrade;
- (PP_Item_Builder*) setCanTrade:(int32_t) value;
- (PP_Item_Builder*) clearCanTrade;

- (BOOL) hasCanSell;
- (int32_t) canSell;
- (PP_Item_Builder*) setCanSell:(int32_t) value;
- (PP_Item_Builder*) clearCanSell;

- (BOOL) hasCanUpgrade;
- (int32_t) canUpgrade;
- (PP_Item_Builder*) setCanUpgrade:(int32_t) value;
- (PP_Item_Builder*) clearCanUpgrade;

- (BOOL) hasCanComposition;
- (int32_t) canComposition;
- (PP_Item_Builder*) setCanComposition:(int32_t) value;
- (PP_Item_Builder*) clearCanComposition;

- (BOOL) hasMaxNum;
- (int32_t) maxNum;
- (PP_Item_Builder*) setMaxNum:(int32_t) value;
- (PP_Item_Builder*) clearMaxNum;
@end

