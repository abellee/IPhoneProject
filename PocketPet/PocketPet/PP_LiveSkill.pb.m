// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_LiveSkill.pb.h"

@implementation PpLiveSkillRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpLiveSkillRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PpLiveChildSkillRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_LiveSkill ()
@property int32_t skillId;
@property (retain) NSString* skillName;
@property int32_t reqLevel;
@property int32_t reqElement;
@property int32_t reqSex;
@property int32_t reqTask;
@property int32_t createTime;
@property (retain) PBAppendableArray * childSkillsArray;
@end

@implementation PP_LiveSkill

- (BOOL) hasSkillId {
  return !!hasSkillId_;
}
- (void) setHasSkillId:(BOOL) value_ {
  hasSkillId_ = !!value_;
}
@synthesize skillId;
- (BOOL) hasSkillName {
  return !!hasSkillName_;
}
- (void) setHasSkillName:(BOOL) value_ {
  hasSkillName_ = !!value_;
}
@synthesize skillName;
- (BOOL) hasReqLevel {
  return !!hasReqLevel_;
}
- (void) setHasReqLevel:(BOOL) value_ {
  hasReqLevel_ = !!value_;
}
@synthesize reqLevel;
- (BOOL) hasReqElement {
  return !!hasReqElement_;
}
- (void) setHasReqElement:(BOOL) value_ {
  hasReqElement_ = !!value_;
}
@synthesize reqElement;
- (BOOL) hasReqSex {
  return !!hasReqSex_;
}
- (void) setHasReqSex:(BOOL) value_ {
  hasReqSex_ = !!value_;
}
@synthesize reqSex;
- (BOOL) hasReqTask {
  return !!hasReqTask_;
}
- (void) setHasReqTask:(BOOL) value_ {
  hasReqTask_ = !!value_;
}
@synthesize reqTask;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
@synthesize childSkillsArray;
@dynamic childSkills;
- (void) dealloc {
  self.skillName = nil;
  self.childSkillsArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.skillId = 0;
    self.skillName = @"";
    self.reqLevel = 0;
    self.reqElement = 0;
    self.reqSex = 0;
    self.reqTask = 0;
    self.createTime = 0;
  }
  return self;
}
static PP_LiveSkill* defaultPP_LiveSkillInstance = nil;
+ (void) initialize {
  if (self == [PP_LiveSkill class]) {
    defaultPP_LiveSkillInstance = [[PP_LiveSkill alloc] init];
  }
}
+ (PP_LiveSkill*) defaultInstance {
  return defaultPP_LiveSkillInstance;
}
- (PP_LiveSkill*) defaultInstance {
  return defaultPP_LiveSkillInstance;
}
- (PBArray *)childSkills {
  return childSkillsArray;
}
- (PP_LiveChildSkill*)childSkillsAtIndex:(NSUInteger)index {
  return [childSkillsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillId) {
    [output writeInt32:1 value:self.skillId];
  }
  if (self.hasSkillName) {
    [output writeString:2 value:self.skillName];
  }
  if (self.hasReqLevel) {
    [output writeInt32:3 value:self.reqLevel];
  }
  if (self.hasReqElement) {
    [output writeInt32:4 value:self.reqElement];
  }
  if (self.hasReqSex) {
    [output writeInt32:5 value:self.reqSex];
  }
  if (self.hasReqTask) {
    [output writeInt32:6 value:self.reqTask];
  }
  if (self.hasCreateTime) {
    [output writeInt32:7 value:self.createTime];
  }
  for (PP_LiveChildSkill *element in self.childSkillsArray) {
    [output writeMessage:8 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillId) {
    size_ += computeInt32Size(1, self.skillId);
  }
  if (self.hasSkillName) {
    size_ += computeStringSize(2, self.skillName);
  }
  if (self.hasReqLevel) {
    size_ += computeInt32Size(3, self.reqLevel);
  }
  if (self.hasReqElement) {
    size_ += computeInt32Size(4, self.reqElement);
  }
  if (self.hasReqSex) {
    size_ += computeInt32Size(5, self.reqSex);
  }
  if (self.hasReqTask) {
    size_ += computeInt32Size(6, self.reqTask);
  }
  if (self.hasCreateTime) {
    size_ += computeInt32Size(7, self.createTime);
  }
  for (PP_LiveChildSkill *element in self.childSkillsArray) {
    size_ += computeMessageSize(8, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_LiveSkill*) parseFromData:(NSData*) data {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromData:data] build];
}
+ (PP_LiveSkill*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_LiveSkill*) parseFromInputStream:(NSInputStream*) input {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromInputStream:input] build];
}
+ (PP_LiveSkill*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_LiveSkill*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromCodedInputStream:input] build];
}
+ (PP_LiveSkill*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_LiveSkill*)[[[PP_LiveSkill builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_LiveSkill_Builder*) builder {
  return [[[PP_LiveSkill_Builder alloc] init] autorelease];
}
+ (PP_LiveSkill_Builder*) builderWithPrototype:(PP_LiveSkill*) prototype {
  return [[PP_LiveSkill builder] mergeFrom:prototype];
}
- (PP_LiveSkill_Builder*) builder {
  return [PP_LiveSkill builder];
}
- (PP_LiveSkill_Builder*) toBuilder {
  return [PP_LiveSkill builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillId", [NSNumber numberWithInt:self.skillId]];
  }
  if (self.hasSkillName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillName", self.skillName];
  }
  if (self.hasReqLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqLevel", [NSNumber numberWithInt:self.reqLevel]];
  }
  if (self.hasReqElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqElement", [NSNumber numberWithInt:self.reqElement]];
  }
  if (self.hasReqSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqSex", [NSNumber numberWithInt:self.reqSex]];
  }
  if (self.hasReqTask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqTask", [NSNumber numberWithInt:self.reqTask]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInt:self.createTime]];
  }
  for (PP_LiveChildSkill* element in self.childSkillsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"childSkills"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_LiveSkill class]]) {
    return NO;
  }
  PP_LiveSkill *otherMessage = other;
  return
      self.hasSkillId == otherMessage.hasSkillId &&
      (!self.hasSkillId || self.skillId == otherMessage.skillId) &&
      self.hasSkillName == otherMessage.hasSkillName &&
      (!self.hasSkillName || [self.skillName isEqual:otherMessage.skillName]) &&
      self.hasReqLevel == otherMessage.hasReqLevel &&
      (!self.hasReqLevel || self.reqLevel == otherMessage.reqLevel) &&
      self.hasReqElement == otherMessage.hasReqElement &&
      (!self.hasReqElement || self.reqElement == otherMessage.reqElement) &&
      self.hasReqSex == otherMessage.hasReqSex &&
      (!self.hasReqSex || self.reqSex == otherMessage.reqSex) &&
      self.hasReqTask == otherMessage.hasReqTask &&
      (!self.hasReqTask || self.reqTask == otherMessage.reqTask) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      [self.childSkillsArray isEqualToArray:otherMessage.childSkillsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.skillId] hash];
  }
  if (self.hasSkillName) {
    hashCode = hashCode * 31 + [self.skillName hash];
  }
  if (self.hasReqLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqLevel] hash];
  }
  if (self.hasReqElement) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqElement] hash];
  }
  if (self.hasReqSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqSex] hash];
  }
  if (self.hasReqTask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqTask] hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.createTime] hash];
  }
  for (PP_LiveChildSkill* element in self.childSkillsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_LiveSkill_Builder()
@property (retain) PP_LiveSkill* result;
@end

@implementation PP_LiveSkill_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_LiveSkill alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_LiveSkill_Builder*) clear {
  self.result = [[[PP_LiveSkill alloc] init] autorelease];
  return self;
}
- (PP_LiveSkill_Builder*) clone {
  return [PP_LiveSkill builderWithPrototype:result];
}
- (PP_LiveSkill*) defaultInstance {
  return [PP_LiveSkill defaultInstance];
}
- (PP_LiveSkill*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_LiveSkill*) buildPartial {
  PP_LiveSkill* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_LiveSkill_Builder*) mergeFrom:(PP_LiveSkill*) other {
  if (other == [PP_LiveSkill defaultInstance]) {
    return self;
  }
  if (other.hasSkillId) {
    [self setSkillId:other.skillId];
  }
  if (other.hasSkillName) {
    [self setSkillName:other.skillName];
  }
  if (other.hasReqLevel) {
    [self setReqLevel:other.reqLevel];
  }
  if (other.hasReqElement) {
    [self setReqElement:other.reqElement];
  }
  if (other.hasReqSex) {
    [self setReqSex:other.reqSex];
  }
  if (other.hasReqTask) {
    [self setReqTask:other.reqTask];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.childSkillsArray.count > 0) {
    if (result.childSkillsArray == nil) {
      result.childSkillsArray = [[other.childSkillsArray copyWithZone:[other.childSkillsArray zone]] autorelease];
    } else {
      [result.childSkillsArray appendArray:other.childSkillsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_LiveSkill_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_LiveSkill_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillId:[input readInt32]];
        break;
      }
      case 18: {
        [self setSkillName:[input readString]];
        break;
      }
      case 24: {
        [self setReqLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setReqElement:[input readInt32]];
        break;
      }
      case 40: {
        [self setReqSex:[input readInt32]];
        break;
      }
      case 48: {
        [self setReqTask:[input readInt32]];
        break;
      }
      case 56: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 66: {
        PP_LiveChildSkill_Builder* subBuilder = [PP_LiveChildSkill builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChildSkills:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSkillId {
  return result.hasSkillId;
}
- (int32_t) skillId {
  return result.skillId;
}
- (PP_LiveSkill_Builder*) setSkillId:(int32_t) value {
  result.hasSkillId = YES;
  result.skillId = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearSkillId {
  result.hasSkillId = NO;
  result.skillId = 0;
  return self;
}
- (BOOL) hasSkillName {
  return result.hasSkillName;
}
- (NSString*) skillName {
  return result.skillName;
}
- (PP_LiveSkill_Builder*) setSkillName:(NSString*) value {
  result.hasSkillName = YES;
  result.skillName = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearSkillName {
  result.hasSkillName = NO;
  result.skillName = @"";
  return self;
}
- (BOOL) hasReqLevel {
  return result.hasReqLevel;
}
- (int32_t) reqLevel {
  return result.reqLevel;
}
- (PP_LiveSkill_Builder*) setReqLevel:(int32_t) value {
  result.hasReqLevel = YES;
  result.reqLevel = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearReqLevel {
  result.hasReqLevel = NO;
  result.reqLevel = 0;
  return self;
}
- (BOOL) hasReqElement {
  return result.hasReqElement;
}
- (int32_t) reqElement {
  return result.reqElement;
}
- (PP_LiveSkill_Builder*) setReqElement:(int32_t) value {
  result.hasReqElement = YES;
  result.reqElement = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearReqElement {
  result.hasReqElement = NO;
  result.reqElement = 0;
  return self;
}
- (BOOL) hasReqSex {
  return result.hasReqSex;
}
- (int32_t) reqSex {
  return result.reqSex;
}
- (PP_LiveSkill_Builder*) setReqSex:(int32_t) value {
  result.hasReqSex = YES;
  result.reqSex = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearReqSex {
  result.hasReqSex = NO;
  result.reqSex = 0;
  return self;
}
- (BOOL) hasReqTask {
  return result.hasReqTask;
}
- (int32_t) reqTask {
  return result.reqTask;
}
- (PP_LiveSkill_Builder*) setReqTask:(int32_t) value {
  result.hasReqTask = YES;
  result.reqTask = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearReqTask {
  result.hasReqTask = NO;
  result.reqTask = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (PP_LiveSkill_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (PP_LiveSkill_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (PBAppendableArray *)childSkills {
  return result.childSkillsArray;
}
- (PP_LiveChildSkill*)childSkillsAtIndex:(NSUInteger)index {
  return [result childSkillsAtIndex:index];
}
- (PP_LiveSkill_Builder *)addChildSkills:(PP_LiveChildSkill*)value {
  if (result.childSkillsArray == nil) {
    result.childSkillsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.childSkillsArray addObject:value];
  return self;
}
- (PP_LiveSkill_Builder *)setChildSkillsArray:(NSArray *)array {
  result.childSkillsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_LiveSkill_Builder *)setChildSkillsValues:(const PP_LiveChildSkill* *)values count:(NSUInteger)count {
  result.childSkillsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_LiveSkill_Builder *)clearChildSkills {
  result.childSkillsArray = nil;
  return self;
}
@end

