// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_Task.pb.h"

@implementation PpTaskRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpTaskRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PpTaskRequireRoot registerAllExtensions:registry];
    [PpTaskAwardRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_Task ()
@property int32_t uid;
@property int32_t taskId;
@property (retain) NSString* taskName;
@property (retain) NSString* taskDes;
@property int32_t taskType;
@property int32_t reqLevel;
@property int32_t reqPlayerNum;
@property (retain) PBAppendableArray * requireListArray;
@property int32_t duration;
@property int32_t actionId;
@property int32_t nextTaskId;
@property int32_t invalidTime;
@property int32_t version;
@property (retain) PBAppendableArray * taskAwardArray;
@end

@implementation PP_Task

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value_ {
  hasUid_ = !!value_;
}
@synthesize uid;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasTaskName {
  return !!hasTaskName_;
}
- (void) setHasTaskName:(BOOL) value_ {
  hasTaskName_ = !!value_;
}
@synthesize taskName;
- (BOOL) hasTaskDes {
  return !!hasTaskDes_;
}
- (void) setHasTaskDes:(BOOL) value_ {
  hasTaskDes_ = !!value_;
}
@synthesize taskDes;
- (BOOL) hasTaskType {
  return !!hasTaskType_;
}
- (void) setHasTaskType:(BOOL) value_ {
  hasTaskType_ = !!value_;
}
@synthesize taskType;
- (BOOL) hasReqLevel {
  return !!hasReqLevel_;
}
- (void) setHasReqLevel:(BOOL) value_ {
  hasReqLevel_ = !!value_;
}
@synthesize reqLevel;
- (BOOL) hasReqPlayerNum {
  return !!hasReqPlayerNum_;
}
- (void) setHasReqPlayerNum:(BOOL) value_ {
  hasReqPlayerNum_ = !!value_;
}
@synthesize reqPlayerNum;
@synthesize requireListArray;
@dynamic requireList;
- (BOOL) hasDuration {
  return !!hasDuration_;
}
- (void) setHasDuration:(BOOL) value_ {
  hasDuration_ = !!value_;
}
@synthesize duration;
- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) value_ {
  hasActionId_ = !!value_;
}
@synthesize actionId;
- (BOOL) hasNextTaskId {
  return !!hasNextTaskId_;
}
- (void) setHasNextTaskId:(BOOL) value_ {
  hasNextTaskId_ = !!value_;
}
@synthesize nextTaskId;
- (BOOL) hasInvalidTime {
  return !!hasInvalidTime_;
}
- (void) setHasInvalidTime:(BOOL) value_ {
  hasInvalidTime_ = !!value_;
}
@synthesize invalidTime;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
@synthesize taskAwardArray;
@dynamic taskAward;
- (void) dealloc {
  self.taskName = nil;
  self.taskDes = nil;
  self.requireListArray = nil;
  self.taskAwardArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.taskId = 0;
    self.taskName = @"";
    self.taskDes = @"";
    self.taskType = 0;
    self.reqLevel = 0;
    self.reqPlayerNum = 0;
    self.duration = 0;
    self.actionId = 0;
    self.nextTaskId = 0;
    self.invalidTime = 0;
    self.version = 0;
  }
  return self;
}
static PP_Task* defaultPP_TaskInstance = nil;
+ (void) initialize {
  if (self == [PP_Task class]) {
    defaultPP_TaskInstance = [[PP_Task alloc] init];
  }
}
+ (PP_Task*) defaultInstance {
  return defaultPP_TaskInstance;
}
- (PP_Task*) defaultInstance {
  return defaultPP_TaskInstance;
}
- (PBArray *)requireList {
  return requireListArray;
}
- (PP_Task_Require*)requireListAtIndex:(NSUInteger)index {
  return [requireListArray objectAtIndex:index];
}
- (PBArray *)taskAward {
  return taskAwardArray;
}
- (PP_Task_Award*)taskAwardAtIndex:(NSUInteger)index {
  return [taskAwardArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeInt32:1 value:self.uid];
  }
  if (self.hasTaskId) {
    [output writeInt32:2 value:self.taskId];
  }
  if (self.hasTaskName) {
    [output writeString:3 value:self.taskName];
  }
  if (self.hasTaskDes) {
    [output writeString:4 value:self.taskDes];
  }
  if (self.hasTaskType) {
    [output writeInt32:5 value:self.taskType];
  }
  if (self.hasReqLevel) {
    [output writeInt32:6 value:self.reqLevel];
  }
  if (self.hasReqPlayerNum) {
    [output writeInt32:7 value:self.reqPlayerNum];
  }
  for (PP_Task_Require *element in self.requireListArray) {
    [output writeMessage:8 value:element];
  }
  if (self.hasDuration) {
    [output writeInt32:9 value:self.duration];
  }
  if (self.hasActionId) {
    [output writeInt32:10 value:self.actionId];
  }
  if (self.hasNextTaskId) {
    [output writeInt32:11 value:self.nextTaskId];
  }
  if (self.hasInvalidTime) {
    [output writeInt32:12 value:self.invalidTime];
  }
  if (self.hasVersion) {
    [output writeInt32:13 value:self.version];
  }
  for (PP_Task_Award *element in self.taskAwardArray) {
    [output writeMessage:14 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeInt32Size(1, self.uid);
  }
  if (self.hasTaskId) {
    size_ += computeInt32Size(2, self.taskId);
  }
  if (self.hasTaskName) {
    size_ += computeStringSize(3, self.taskName);
  }
  if (self.hasTaskDes) {
    size_ += computeStringSize(4, self.taskDes);
  }
  if (self.hasTaskType) {
    size_ += computeInt32Size(5, self.taskType);
  }
  if (self.hasReqLevel) {
    size_ += computeInt32Size(6, self.reqLevel);
  }
  if (self.hasReqPlayerNum) {
    size_ += computeInt32Size(7, self.reqPlayerNum);
  }
  for (PP_Task_Require *element in self.requireListArray) {
    size_ += computeMessageSize(8, element);
  }
  if (self.hasDuration) {
    size_ += computeInt32Size(9, self.duration);
  }
  if (self.hasActionId) {
    size_ += computeInt32Size(10, self.actionId);
  }
  if (self.hasNextTaskId) {
    size_ += computeInt32Size(11, self.nextTaskId);
  }
  if (self.hasInvalidTime) {
    size_ += computeInt32Size(12, self.invalidTime);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(13, self.version);
  }
  for (PP_Task_Award *element in self.taskAwardArray) {
    size_ += computeMessageSize(14, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_Task*) parseFromData:(NSData*) data {
  return (PP_Task*)[[[PP_Task builder] mergeFromData:data] build];
}
+ (PP_Task*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task*)[[[PP_Task builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_Task*) parseFromInputStream:(NSInputStream*) input {
  return (PP_Task*)[[[PP_Task builder] mergeFromInputStream:input] build];
}
+ (PP_Task*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task*)[[[PP_Task builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Task*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_Task*)[[[PP_Task builder] mergeFromCodedInputStream:input] build];
}
+ (PP_Task*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Task*)[[[PP_Task builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Task_Builder*) builder {
  return [[[PP_Task_Builder alloc] init] autorelease];
}
+ (PP_Task_Builder*) builderWithPrototype:(PP_Task*) prototype {
  return [[PP_Task builder] mergeFrom:prototype];
}
- (PP_Task_Builder*) builder {
  return [PP_Task builder];
}
- (PP_Task_Builder*) toBuilder {
  return [PP_Task builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInt:self.uid]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInt:self.taskId]];
  }
  if (self.hasTaskName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskName", self.taskName];
  }
  if (self.hasTaskDes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskDes", self.taskDes];
  }
  if (self.hasTaskType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskType", [NSNumber numberWithInt:self.taskType]];
  }
  if (self.hasReqLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqLevel", [NSNumber numberWithInt:self.reqLevel]];
  }
  if (self.hasReqPlayerNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reqPlayerNum", [NSNumber numberWithInt:self.reqPlayerNum]];
  }
  for (PP_Task_Require* element in self.requireListArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"requireList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"duration", [NSNumber numberWithInt:self.duration]];
  }
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", [NSNumber numberWithInt:self.actionId]];
  }
  if (self.hasNextTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nextTaskId", [NSNumber numberWithInt:self.nextTaskId]];
  }
  if (self.hasInvalidTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"invalidTime", [NSNumber numberWithInt:self.invalidTime]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  for (PP_Task_Award* element in self.taskAwardArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"taskAward"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_Task class]]) {
    return NO;
  }
  PP_Task *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasTaskName == otherMessage.hasTaskName &&
      (!self.hasTaskName || [self.taskName isEqual:otherMessage.taskName]) &&
      self.hasTaskDes == otherMessage.hasTaskDes &&
      (!self.hasTaskDes || [self.taskDes isEqual:otherMessage.taskDes]) &&
      self.hasTaskType == otherMessage.hasTaskType &&
      (!self.hasTaskType || self.taskType == otherMessage.taskType) &&
      self.hasReqLevel == otherMessage.hasReqLevel &&
      (!self.hasReqLevel || self.reqLevel == otherMessage.reqLevel) &&
      self.hasReqPlayerNum == otherMessage.hasReqPlayerNum &&
      (!self.hasReqPlayerNum || self.reqPlayerNum == otherMessage.reqPlayerNum) &&
      [self.requireListArray isEqualToArray:otherMessage.requireListArray] &&
      self.hasDuration == otherMessage.hasDuration &&
      (!self.hasDuration || self.duration == otherMessage.duration) &&
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || self.actionId == otherMessage.actionId) &&
      self.hasNextTaskId == otherMessage.hasNextTaskId &&
      (!self.hasNextTaskId || self.nextTaskId == otherMessage.nextTaskId) &&
      self.hasInvalidTime == otherMessage.hasInvalidTime &&
      (!self.hasInvalidTime || self.invalidTime == otherMessage.invalidTime) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      [self.taskAwardArray isEqualToArray:otherMessage.taskAwardArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.uid] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskId] hash];
  }
  if (self.hasTaskName) {
    hashCode = hashCode * 31 + [self.taskName hash];
  }
  if (self.hasTaskDes) {
    hashCode = hashCode * 31 + [self.taskDes hash];
  }
  if (self.hasTaskType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.taskType] hash];
  }
  if (self.hasReqLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqLevel] hash];
  }
  if (self.hasReqPlayerNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.reqPlayerNum] hash];
  }
  for (PP_Task_Require* element in self.requireListArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.duration] hash];
  }
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.actionId] hash];
  }
  if (self.hasNextTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.nextTaskId] hash];
  }
  if (self.hasInvalidTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.invalidTime] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  for (PP_Task_Award* element in self.taskAwardArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_Task_Builder()
@property (retain) PP_Task* result;
@end

@implementation PP_Task_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_Task alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_Task_Builder*) clear {
  self.result = [[[PP_Task alloc] init] autorelease];
  return self;
}
- (PP_Task_Builder*) clone {
  return [PP_Task builderWithPrototype:result];
}
- (PP_Task*) defaultInstance {
  return [PP_Task defaultInstance];
}
- (PP_Task*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_Task*) buildPartial {
  PP_Task* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_Task_Builder*) mergeFrom:(PP_Task*) other {
  if (other == [PP_Task defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasTaskName) {
    [self setTaskName:other.taskName];
  }
  if (other.hasTaskDes) {
    [self setTaskDes:other.taskDes];
  }
  if (other.hasTaskType) {
    [self setTaskType:other.taskType];
  }
  if (other.hasReqLevel) {
    [self setReqLevel:other.reqLevel];
  }
  if (other.hasReqPlayerNum) {
    [self setReqPlayerNum:other.reqPlayerNum];
  }
  if (other.requireListArray.count > 0) {
    if (result.requireListArray == nil) {
      result.requireListArray = [[other.requireListArray copyWithZone:[other.requireListArray zone]] autorelease];
    } else {
      [result.requireListArray appendArray:other.requireListArray];
    }
  }
  if (other.hasDuration) {
    [self setDuration:other.duration];
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasNextTaskId) {
    [self setNextTaskId:other.nextTaskId];
  }
  if (other.hasInvalidTime) {
    [self setInvalidTime:other.invalidTime];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.taskAwardArray.count > 0) {
    if (result.taskAwardArray == nil) {
      result.taskAwardArray = [[other.taskAwardArray copyWithZone:[other.taskAwardArray zone]] autorelease];
    } else {
      [result.taskAwardArray appendArray:other.taskAwardArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_Task_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_Task_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readInt32]];
        break;
      }
      case 16: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 26: {
        [self setTaskName:[input readString]];
        break;
      }
      case 34: {
        [self setTaskDes:[input readString]];
        break;
      }
      case 40: {
        [self setTaskType:[input readInt32]];
        break;
      }
      case 48: {
        [self setReqLevel:[input readInt32]];
        break;
      }
      case 56: {
        [self setReqPlayerNum:[input readInt32]];
        break;
      }
      case 66: {
        PP_Task_Require_Builder* subBuilder = [PP_Task_Require builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequireList:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setDuration:[input readInt32]];
        break;
      }
      case 80: {
        [self setActionId:[input readInt32]];
        break;
      }
      case 88: {
        [self setNextTaskId:[input readInt32]];
        break;
      }
      case 96: {
        [self setInvalidTime:[input readInt32]];
        break;
      }
      case 104: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 114: {
        PP_Task_Award_Builder* subBuilder = [PP_Task_Award builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTaskAward:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (int32_t) uid {
  return result.uid;
}
- (PP_Task_Builder*) setUid:(int32_t) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (PP_Task_Builder*) clearUid {
  result.hasUid = NO;
  result.uid = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (PP_Task_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (PP_Task_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasTaskName {
  return result.hasTaskName;
}
- (NSString*) taskName {
  return result.taskName;
}
- (PP_Task_Builder*) setTaskName:(NSString*) value {
  result.hasTaskName = YES;
  result.taskName = value;
  return self;
}
- (PP_Task_Builder*) clearTaskName {
  result.hasTaskName = NO;
  result.taskName = @"";
  return self;
}
- (BOOL) hasTaskDes {
  return result.hasTaskDes;
}
- (NSString*) taskDes {
  return result.taskDes;
}
- (PP_Task_Builder*) setTaskDes:(NSString*) value {
  result.hasTaskDes = YES;
  result.taskDes = value;
  return self;
}
- (PP_Task_Builder*) clearTaskDes {
  result.hasTaskDes = NO;
  result.taskDes = @"";
  return self;
}
- (BOOL) hasTaskType {
  return result.hasTaskType;
}
- (int32_t) taskType {
  return result.taskType;
}
- (PP_Task_Builder*) setTaskType:(int32_t) value {
  result.hasTaskType = YES;
  result.taskType = value;
  return self;
}
- (PP_Task_Builder*) clearTaskType {
  result.hasTaskType = NO;
  result.taskType = 0;
  return self;
}
- (BOOL) hasReqLevel {
  return result.hasReqLevel;
}
- (int32_t) reqLevel {
  return result.reqLevel;
}
- (PP_Task_Builder*) setReqLevel:(int32_t) value {
  result.hasReqLevel = YES;
  result.reqLevel = value;
  return self;
}
- (PP_Task_Builder*) clearReqLevel {
  result.hasReqLevel = NO;
  result.reqLevel = 0;
  return self;
}
- (BOOL) hasReqPlayerNum {
  return result.hasReqPlayerNum;
}
- (int32_t) reqPlayerNum {
  return result.reqPlayerNum;
}
- (PP_Task_Builder*) setReqPlayerNum:(int32_t) value {
  result.hasReqPlayerNum = YES;
  result.reqPlayerNum = value;
  return self;
}
- (PP_Task_Builder*) clearReqPlayerNum {
  result.hasReqPlayerNum = NO;
  result.reqPlayerNum = 0;
  return self;
}
- (PBAppendableArray *)requireList {
  return result.requireListArray;
}
- (PP_Task_Require*)requireListAtIndex:(NSUInteger)index {
  return [result requireListAtIndex:index];
}
- (PP_Task_Builder *)addRequireList:(PP_Task_Require*)value {
  if (result.requireListArray == nil) {
    result.requireListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.requireListArray addObject:value];
  return self;
}
- (PP_Task_Builder *)setRequireListArray:(NSArray *)array {
  result.requireListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Task_Builder *)setRequireListValues:(const PP_Task_Require* *)values count:(NSUInteger)count {
  result.requireListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Task_Builder *)clearRequireList {
  result.requireListArray = nil;
  return self;
}
- (BOOL) hasDuration {
  return result.hasDuration;
}
- (int32_t) duration {
  return result.duration;
}
- (PP_Task_Builder*) setDuration:(int32_t) value {
  result.hasDuration = YES;
  result.duration = value;
  return self;
}
- (PP_Task_Builder*) clearDuration {
  result.hasDuration = NO;
  result.duration = 0;
  return self;
}
- (BOOL) hasActionId {
  return result.hasActionId;
}
- (int32_t) actionId {
  return result.actionId;
}
- (PP_Task_Builder*) setActionId:(int32_t) value {
  result.hasActionId = YES;
  result.actionId = value;
  return self;
}
- (PP_Task_Builder*) clearActionId {
  result.hasActionId = NO;
  result.actionId = 0;
  return self;
}
- (BOOL) hasNextTaskId {
  return result.hasNextTaskId;
}
- (int32_t) nextTaskId {
  return result.nextTaskId;
}
- (PP_Task_Builder*) setNextTaskId:(int32_t) value {
  result.hasNextTaskId = YES;
  result.nextTaskId = value;
  return self;
}
- (PP_Task_Builder*) clearNextTaskId {
  result.hasNextTaskId = NO;
  result.nextTaskId = 0;
  return self;
}
- (BOOL) hasInvalidTime {
  return result.hasInvalidTime;
}
- (int32_t) invalidTime {
  return result.invalidTime;
}
- (PP_Task_Builder*) setInvalidTime:(int32_t) value {
  result.hasInvalidTime = YES;
  result.invalidTime = value;
  return self;
}
- (PP_Task_Builder*) clearInvalidTime {
  result.hasInvalidTime = NO;
  result.invalidTime = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PP_Task_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PP_Task_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (PBAppendableArray *)taskAward {
  return result.taskAwardArray;
}
- (PP_Task_Award*)taskAwardAtIndex:(NSUInteger)index {
  return [result taskAwardAtIndex:index];
}
- (PP_Task_Builder *)addTaskAward:(PP_Task_Award*)value {
  if (result.taskAwardArray == nil) {
    result.taskAwardArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.taskAwardArray addObject:value];
  return self;
}
- (PP_Task_Builder *)setTaskAwardArray:(NSArray *)array {
  result.taskAwardArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Task_Builder *)setTaskAwardValues:(const PP_Task_Award* *)values count:(NSUInteger)count {
  result.taskAwardArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Task_Builder *)clearTaskAward {
  result.taskAwardArray = nil;
  return self;
}
@end

