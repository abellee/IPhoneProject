// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_KeyAndIntValue.pb.h"

@implementation PpKeyAndIntValueRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpKeyAndIntValueRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_KeyAndIntValue ()
@property int32_t actionId;
@property int32_t value;
@end

@implementation PP_KeyAndIntValue

- (BOOL) hasActionId {
  return !!hasActionId_;
}
- (void) setHasActionId:(BOOL) value_ {
  hasActionId_ = !!value_;
}
@synthesize actionId;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) value_ {
  hasValue_ = !!value_;
}
@synthesize value;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.actionId = 0;
    self.value = 0;
  }
  return self;
}
static PP_KeyAndIntValue* defaultPP_KeyAndIntValueInstance = nil;
+ (void) initialize {
  if (self == [PP_KeyAndIntValue class]) {
    defaultPP_KeyAndIntValueInstance = [[PP_KeyAndIntValue alloc] init];
  }
}
+ (PP_KeyAndIntValue*) defaultInstance {
  return defaultPP_KeyAndIntValueInstance;
}
- (PP_KeyAndIntValue*) defaultInstance {
  return defaultPP_KeyAndIntValueInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasActionId) {
    [output writeInt32:1 value:self.actionId];
  }
  if (self.hasValue) {
    [output writeInt32:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasActionId) {
    size_ += computeInt32Size(1, self.actionId);
  }
  if (self.hasValue) {
    size_ += computeInt32Size(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_KeyAndIntValue*) parseFromData:(NSData*) data {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromData:data] build];
}
+ (PP_KeyAndIntValue*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_KeyAndIntValue*) parseFromInputStream:(NSInputStream*) input {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromInputStream:input] build];
}
+ (PP_KeyAndIntValue*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_KeyAndIntValue*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromCodedInputStream:input] build];
}
+ (PP_KeyAndIntValue*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_KeyAndIntValue*)[[[PP_KeyAndIntValue builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_KeyAndIntValue_Builder*) builder {
  return [[[PP_KeyAndIntValue_Builder alloc] init] autorelease];
}
+ (PP_KeyAndIntValue_Builder*) builderWithPrototype:(PP_KeyAndIntValue*) prototype {
  return [[PP_KeyAndIntValue builder] mergeFrom:prototype];
}
- (PP_KeyAndIntValue_Builder*) builder {
  return [PP_KeyAndIntValue builder];
}
- (PP_KeyAndIntValue_Builder*) toBuilder {
  return [PP_KeyAndIntValue builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasActionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionId", [NSNumber numberWithInt:self.actionId]];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", [NSNumber numberWithInt:self.value]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_KeyAndIntValue class]]) {
    return NO;
  }
  PP_KeyAndIntValue *otherMessage = other;
  return
      self.hasActionId == otherMessage.hasActionId &&
      (!self.hasActionId || self.actionId == otherMessage.actionId) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || self.value == otherMessage.value) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasActionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.actionId] hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.value] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_KeyAndIntValue_Builder()
@property (retain) PP_KeyAndIntValue* result;
@end

@implementation PP_KeyAndIntValue_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_KeyAndIntValue alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_KeyAndIntValue_Builder*) clear {
  self.result = [[[PP_KeyAndIntValue alloc] init] autorelease];
  return self;
}
- (PP_KeyAndIntValue_Builder*) clone {
  return [PP_KeyAndIntValue builderWithPrototype:result];
}
- (PP_KeyAndIntValue*) defaultInstance {
  return [PP_KeyAndIntValue defaultInstance];
}
- (PP_KeyAndIntValue*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_KeyAndIntValue*) buildPartial {
  PP_KeyAndIntValue* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_KeyAndIntValue_Builder*) mergeFrom:(PP_KeyAndIntValue*) other {
  if (other == [PP_KeyAndIntValue defaultInstance]) {
    return self;
  }
  if (other.hasActionId) {
    [self setActionId:other.actionId];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_KeyAndIntValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_KeyAndIntValue_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setActionId:[input readInt32]];
        break;
      }
      case 16: {
        [self setValue:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasActionId {
  return result.hasActionId;
}
- (int32_t) actionId {
  return result.actionId;
}
- (PP_KeyAndIntValue_Builder*) setActionId:(int32_t) value {
  result.hasActionId = YES;
  result.actionId = value;
  return self;
}
- (PP_KeyAndIntValue_Builder*) clearActionId {
  result.hasActionId = NO;
  result.actionId = 0;
  return self;
}
- (BOOL) hasValue {
  return result.hasValue;
}
- (int32_t) value {
  return result.value;
}
- (PP_KeyAndIntValue_Builder*) setValue:(int32_t) value {
  result.hasValue = YES;
  result.value = value;
  return self;
}
- (PP_KeyAndIntValue_Builder*) clearValue {
  result.hasValue = NO;
  result.value = 0;
  return self;
}
@end

