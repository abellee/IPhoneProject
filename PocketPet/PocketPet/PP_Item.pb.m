// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_Item.pb.h"

@implementation PpItemRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpItemRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_Item ()
@property int32_t itemId;
@property (retain) NSString* itemName;
@property int32_t itemLevel;
@property int32_t itemReqLevel;
@property int32_t itemAttack;
@property int32_t itemMagic;
@property int32_t itemHp;
@property int32_t itemMp;
@property int32_t itemLife;
@property int32_t itemFeel;
@property int32_t itemExp;
@property int32_t itemVariationRate;
@property int32_t itemPower;
@property int32_t itemAgile;
@property int32_t itemIntelligence;
@property int32_t itemVigour;
@property int32_t itemEndur;
@property int32_t itemDefense;
@property int32_t itemMagicDefense;
@property int32_t itemAttackLevel;
@property int32_t itemDefenseLevel;
@property int32_t itemMagicLevel;
@property int32_t itemMagicDefenseLevel;
@property int32_t parentType;
@property int32_t itemType;
@property int32_t itemInvalidTime;
@property int32_t version;
@property int32_t tokenPrice;
@property int32_t coinPrice;
@property int32_t itemElement;
@property int32_t isShop;
@property int32_t canTrade;
@property int32_t canSell;
@property int32_t canUpgrade;
@property int32_t canComposition;
@property int32_t maxNum;
@end

@implementation PP_Item

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value_ {
  hasItemId_ = !!value_;
}
@synthesize itemId;
- (BOOL) hasItemName {
  return !!hasItemName_;
}
- (void) setHasItemName:(BOOL) value_ {
  hasItemName_ = !!value_;
}
@synthesize itemName;
- (BOOL) hasItemLevel {
  return !!hasItemLevel_;
}
- (void) setHasItemLevel:(BOOL) value_ {
  hasItemLevel_ = !!value_;
}
@synthesize itemLevel;
- (BOOL) hasItemReqLevel {
  return !!hasItemReqLevel_;
}
- (void) setHasItemReqLevel:(BOOL) value_ {
  hasItemReqLevel_ = !!value_;
}
@synthesize itemReqLevel;
- (BOOL) hasItemAttack {
  return !!hasItemAttack_;
}
- (void) setHasItemAttack:(BOOL) value_ {
  hasItemAttack_ = !!value_;
}
@synthesize itemAttack;
- (BOOL) hasItemMagic {
  return !!hasItemMagic_;
}
- (void) setHasItemMagic:(BOOL) value_ {
  hasItemMagic_ = !!value_;
}
@synthesize itemMagic;
- (BOOL) hasItemHp {
  return !!hasItemHp_;
}
- (void) setHasItemHp:(BOOL) value_ {
  hasItemHp_ = !!value_;
}
@synthesize itemHp;
- (BOOL) hasItemMp {
  return !!hasItemMp_;
}
- (void) setHasItemMp:(BOOL) value_ {
  hasItemMp_ = !!value_;
}
@synthesize itemMp;
- (BOOL) hasItemLife {
  return !!hasItemLife_;
}
- (void) setHasItemLife:(BOOL) value_ {
  hasItemLife_ = !!value_;
}
@synthesize itemLife;
- (BOOL) hasItemFeel {
  return !!hasItemFeel_;
}
- (void) setHasItemFeel:(BOOL) value_ {
  hasItemFeel_ = !!value_;
}
@synthesize itemFeel;
- (BOOL) hasItemExp {
  return !!hasItemExp_;
}
- (void) setHasItemExp:(BOOL) value_ {
  hasItemExp_ = !!value_;
}
@synthesize itemExp;
- (BOOL) hasItemVariationRate {
  return !!hasItemVariationRate_;
}
- (void) setHasItemVariationRate:(BOOL) value_ {
  hasItemVariationRate_ = !!value_;
}
@synthesize itemVariationRate;
- (BOOL) hasItemPower {
  return !!hasItemPower_;
}
- (void) setHasItemPower:(BOOL) value_ {
  hasItemPower_ = !!value_;
}
@synthesize itemPower;
- (BOOL) hasItemAgile {
  return !!hasItemAgile_;
}
- (void) setHasItemAgile:(BOOL) value_ {
  hasItemAgile_ = !!value_;
}
@synthesize itemAgile;
- (BOOL) hasItemIntelligence {
  return !!hasItemIntelligence_;
}
- (void) setHasItemIntelligence:(BOOL) value_ {
  hasItemIntelligence_ = !!value_;
}
@synthesize itemIntelligence;
- (BOOL) hasItemVigour {
  return !!hasItemVigour_;
}
- (void) setHasItemVigour:(BOOL) value_ {
  hasItemVigour_ = !!value_;
}
@synthesize itemVigour;
- (BOOL) hasItemEndur {
  return !!hasItemEndur_;
}
- (void) setHasItemEndur:(BOOL) value_ {
  hasItemEndur_ = !!value_;
}
@synthesize itemEndur;
- (BOOL) hasItemDefense {
  return !!hasItemDefense_;
}
- (void) setHasItemDefense:(BOOL) value_ {
  hasItemDefense_ = !!value_;
}
@synthesize itemDefense;
- (BOOL) hasItemMagicDefense {
  return !!hasItemMagicDefense_;
}
- (void) setHasItemMagicDefense:(BOOL) value_ {
  hasItemMagicDefense_ = !!value_;
}
@synthesize itemMagicDefense;
- (BOOL) hasItemAttackLevel {
  return !!hasItemAttackLevel_;
}
- (void) setHasItemAttackLevel:(BOOL) value_ {
  hasItemAttackLevel_ = !!value_;
}
@synthesize itemAttackLevel;
- (BOOL) hasItemDefenseLevel {
  return !!hasItemDefenseLevel_;
}
- (void) setHasItemDefenseLevel:(BOOL) value_ {
  hasItemDefenseLevel_ = !!value_;
}
@synthesize itemDefenseLevel;
- (BOOL) hasItemMagicLevel {
  return !!hasItemMagicLevel_;
}
- (void) setHasItemMagicLevel:(BOOL) value_ {
  hasItemMagicLevel_ = !!value_;
}
@synthesize itemMagicLevel;
- (BOOL) hasItemMagicDefenseLevel {
  return !!hasItemMagicDefenseLevel_;
}
- (void) setHasItemMagicDefenseLevel:(BOOL) value_ {
  hasItemMagicDefenseLevel_ = !!value_;
}
@synthesize itemMagicDefenseLevel;
- (BOOL) hasParentType {
  return !!hasParentType_;
}
- (void) setHasParentType:(BOOL) value_ {
  hasParentType_ = !!value_;
}
@synthesize parentType;
- (BOOL) hasItemType {
  return !!hasItemType_;
}
- (void) setHasItemType:(BOOL) value_ {
  hasItemType_ = !!value_;
}
@synthesize itemType;
- (BOOL) hasItemInvalidTime {
  return !!hasItemInvalidTime_;
}
- (void) setHasItemInvalidTime:(BOOL) value_ {
  hasItemInvalidTime_ = !!value_;
}
@synthesize itemInvalidTime;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
- (BOOL) hasTokenPrice {
  return !!hasTokenPrice_;
}
- (void) setHasTokenPrice:(BOOL) value_ {
  hasTokenPrice_ = !!value_;
}
@synthesize tokenPrice;
- (BOOL) hasCoinPrice {
  return !!hasCoinPrice_;
}
- (void) setHasCoinPrice:(BOOL) value_ {
  hasCoinPrice_ = !!value_;
}
@synthesize coinPrice;
- (BOOL) hasItemElement {
  return !!hasItemElement_;
}
- (void) setHasItemElement:(BOOL) value_ {
  hasItemElement_ = !!value_;
}
@synthesize itemElement;
- (BOOL) hasIsShop {
  return !!hasIsShop_;
}
- (void) setHasIsShop:(BOOL) value_ {
  hasIsShop_ = !!value_;
}
@synthesize isShop;
- (BOOL) hasCanTrade {
  return !!hasCanTrade_;
}
- (void) setHasCanTrade:(BOOL) value_ {
  hasCanTrade_ = !!value_;
}
@synthesize canTrade;
- (BOOL) hasCanSell {
  return !!hasCanSell_;
}
- (void) setHasCanSell:(BOOL) value_ {
  hasCanSell_ = !!value_;
}
@synthesize canSell;
- (BOOL) hasCanUpgrade {
  return !!hasCanUpgrade_;
}
- (void) setHasCanUpgrade:(BOOL) value_ {
  hasCanUpgrade_ = !!value_;
}
@synthesize canUpgrade;
- (BOOL) hasCanComposition {
  return !!hasCanComposition_;
}
- (void) setHasCanComposition:(BOOL) value_ {
  hasCanComposition_ = !!value_;
}
@synthesize canComposition;
- (BOOL) hasMaxNum {
  return !!hasMaxNum_;
}
- (void) setHasMaxNum:(BOOL) value_ {
  hasMaxNum_ = !!value_;
}
@synthesize maxNum;
- (void) dealloc {
  self.itemName = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.itemName = @"";
    self.itemLevel = 0;
    self.itemReqLevel = 0;
    self.itemAttack = 0;
    self.itemMagic = 0;
    self.itemHp = 0;
    self.itemMp = 0;
    self.itemLife = 0;
    self.itemFeel = 0;
    self.itemExp = 0;
    self.itemVariationRate = 0;
    self.itemPower = 0;
    self.itemAgile = 0;
    self.itemIntelligence = 0;
    self.itemVigour = 0;
    self.itemEndur = 0;
    self.itemDefense = 0;
    self.itemMagicDefense = 0;
    self.itemAttackLevel = 0;
    self.itemDefenseLevel = 0;
    self.itemMagicLevel = 0;
    self.itemMagicDefenseLevel = 0;
    self.parentType = 0;
    self.itemType = 0;
    self.itemInvalidTime = 0;
    self.version = 0;
    self.tokenPrice = 0;
    self.coinPrice = 0;
    self.itemElement = 0;
    self.isShop = 0;
    self.canTrade = 0;
    self.canSell = 0;
    self.canUpgrade = 0;
    self.canComposition = 0;
    self.maxNum = 0;
  }
  return self;
}
static PP_Item* defaultPP_ItemInstance = nil;
+ (void) initialize {
  if (self == [PP_Item class]) {
    defaultPP_ItemInstance = [[PP_Item alloc] init];
  }
}
+ (PP_Item*) defaultInstance {
  return defaultPP_ItemInstance;
}
- (PP_Item*) defaultInstance {
  return defaultPP_ItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasItemName) {
    [output writeString:2 value:self.itemName];
  }
  if (self.hasItemLevel) {
    [output writeInt32:3 value:self.itemLevel];
  }
  if (self.hasItemReqLevel) {
    [output writeInt32:4 value:self.itemReqLevel];
  }
  if (self.hasItemAttack) {
    [output writeInt32:5 value:self.itemAttack];
  }
  if (self.hasItemMagic) {
    [output writeInt32:6 value:self.itemMagic];
  }
  if (self.hasItemHp) {
    [output writeInt32:7 value:self.itemHp];
  }
  if (self.hasItemMp) {
    [output writeInt32:8 value:self.itemMp];
  }
  if (self.hasItemLife) {
    [output writeInt32:9 value:self.itemLife];
  }
  if (self.hasItemFeel) {
    [output writeInt32:10 value:self.itemFeel];
  }
  if (self.hasItemExp) {
    [output writeInt32:11 value:self.itemExp];
  }
  if (self.hasItemVariationRate) {
    [output writeInt32:12 value:self.itemVariationRate];
  }
  if (self.hasItemPower) {
    [output writeInt32:13 value:self.itemPower];
  }
  if (self.hasItemAgile) {
    [output writeInt32:14 value:self.itemAgile];
  }
  if (self.hasItemIntelligence) {
    [output writeInt32:15 value:self.itemIntelligence];
  }
  if (self.hasItemVigour) {
    [output writeInt32:16 value:self.itemVigour];
  }
  if (self.hasItemEndur) {
    [output writeInt32:17 value:self.itemEndur];
  }
  if (self.hasItemDefense) {
    [output writeInt32:18 value:self.itemDefense];
  }
  if (self.hasItemMagicDefense) {
    [output writeInt32:19 value:self.itemMagicDefense];
  }
  if (self.hasItemAttackLevel) {
    [output writeInt32:20 value:self.itemAttackLevel];
  }
  if (self.hasItemDefenseLevel) {
    [output writeInt32:21 value:self.itemDefenseLevel];
  }
  if (self.hasItemMagicLevel) {
    [output writeInt32:22 value:self.itemMagicLevel];
  }
  if (self.hasItemMagicDefenseLevel) {
    [output writeInt32:23 value:self.itemMagicDefenseLevel];
  }
  if (self.hasParentType) {
    [output writeInt32:24 value:self.parentType];
  }
  if (self.hasItemType) {
    [output writeInt32:25 value:self.itemType];
  }
  if (self.hasItemInvalidTime) {
    [output writeInt32:26 value:self.itemInvalidTime];
  }
  if (self.hasVersion) {
    [output writeInt32:27 value:self.version];
  }
  if (self.hasTokenPrice) {
    [output writeInt32:28 value:self.tokenPrice];
  }
  if (self.hasCoinPrice) {
    [output writeInt32:29 value:self.coinPrice];
  }
  if (self.hasItemElement) {
    [output writeInt32:30 value:self.itemElement];
  }
  if (self.hasIsShop) {
    [output writeInt32:31 value:self.isShop];
  }
  if (self.hasCanTrade) {
    [output writeInt32:32 value:self.canTrade];
  }
  if (self.hasCanSell) {
    [output writeInt32:33 value:self.canSell];
  }
  if (self.hasCanUpgrade) {
    [output writeInt32:34 value:self.canUpgrade];
  }
  if (self.hasCanComposition) {
    [output writeInt32:35 value:self.canComposition];
  }
  if (self.hasMaxNum) {
    [output writeInt32:36 value:self.maxNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasItemId) {
    size_ += computeInt32Size(1, self.itemId);
  }
  if (self.hasItemName) {
    size_ += computeStringSize(2, self.itemName);
  }
  if (self.hasItemLevel) {
    size_ += computeInt32Size(3, self.itemLevel);
  }
  if (self.hasItemReqLevel) {
    size_ += computeInt32Size(4, self.itemReqLevel);
  }
  if (self.hasItemAttack) {
    size_ += computeInt32Size(5, self.itemAttack);
  }
  if (self.hasItemMagic) {
    size_ += computeInt32Size(6, self.itemMagic);
  }
  if (self.hasItemHp) {
    size_ += computeInt32Size(7, self.itemHp);
  }
  if (self.hasItemMp) {
    size_ += computeInt32Size(8, self.itemMp);
  }
  if (self.hasItemLife) {
    size_ += computeInt32Size(9, self.itemLife);
  }
  if (self.hasItemFeel) {
    size_ += computeInt32Size(10, self.itemFeel);
  }
  if (self.hasItemExp) {
    size_ += computeInt32Size(11, self.itemExp);
  }
  if (self.hasItemVariationRate) {
    size_ += computeInt32Size(12, self.itemVariationRate);
  }
  if (self.hasItemPower) {
    size_ += computeInt32Size(13, self.itemPower);
  }
  if (self.hasItemAgile) {
    size_ += computeInt32Size(14, self.itemAgile);
  }
  if (self.hasItemIntelligence) {
    size_ += computeInt32Size(15, self.itemIntelligence);
  }
  if (self.hasItemVigour) {
    size_ += computeInt32Size(16, self.itemVigour);
  }
  if (self.hasItemEndur) {
    size_ += computeInt32Size(17, self.itemEndur);
  }
  if (self.hasItemDefense) {
    size_ += computeInt32Size(18, self.itemDefense);
  }
  if (self.hasItemMagicDefense) {
    size_ += computeInt32Size(19, self.itemMagicDefense);
  }
  if (self.hasItemAttackLevel) {
    size_ += computeInt32Size(20, self.itemAttackLevel);
  }
  if (self.hasItemDefenseLevel) {
    size_ += computeInt32Size(21, self.itemDefenseLevel);
  }
  if (self.hasItemMagicLevel) {
    size_ += computeInt32Size(22, self.itemMagicLevel);
  }
  if (self.hasItemMagicDefenseLevel) {
    size_ += computeInt32Size(23, self.itemMagicDefenseLevel);
  }
  if (self.hasParentType) {
    size_ += computeInt32Size(24, self.parentType);
  }
  if (self.hasItemType) {
    size_ += computeInt32Size(25, self.itemType);
  }
  if (self.hasItemInvalidTime) {
    size_ += computeInt32Size(26, self.itemInvalidTime);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(27, self.version);
  }
  if (self.hasTokenPrice) {
    size_ += computeInt32Size(28, self.tokenPrice);
  }
  if (self.hasCoinPrice) {
    size_ += computeInt32Size(29, self.coinPrice);
  }
  if (self.hasItemElement) {
    size_ += computeInt32Size(30, self.itemElement);
  }
  if (self.hasIsShop) {
    size_ += computeInt32Size(31, self.isShop);
  }
  if (self.hasCanTrade) {
    size_ += computeInt32Size(32, self.canTrade);
  }
  if (self.hasCanSell) {
    size_ += computeInt32Size(33, self.canSell);
  }
  if (self.hasCanUpgrade) {
    size_ += computeInt32Size(34, self.canUpgrade);
  }
  if (self.hasCanComposition) {
    size_ += computeInt32Size(35, self.canComposition);
  }
  if (self.hasMaxNum) {
    size_ += computeInt32Size(36, self.maxNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_Item*) parseFromData:(NSData*) data {
  return (PP_Item*)[[[PP_Item builder] mergeFromData:data] build];
}
+ (PP_Item*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Item*)[[[PP_Item builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_Item*) parseFromInputStream:(NSInputStream*) input {
  return (PP_Item*)[[[PP_Item builder] mergeFromInputStream:input] build];
}
+ (PP_Item*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Item*)[[[PP_Item builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_Item*)[[[PP_Item builder] mergeFromCodedInputStream:input] build];
}
+ (PP_Item*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Item*)[[[PP_Item builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Item_Builder*) builder {
  return [[[PP_Item_Builder alloc] init] autorelease];
}
+ (PP_Item_Builder*) builderWithPrototype:(PP_Item*) prototype {
  return [[PP_Item builder] mergeFrom:prototype];
}
- (PP_Item_Builder*) builder {
  return [PP_Item builder];
}
- (PP_Item_Builder*) toBuilder {
  return [PP_Item builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInt:self.itemId]];
  }
  if (self.hasItemName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemName", self.itemName];
  }
  if (self.hasItemLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemLevel", [NSNumber numberWithInt:self.itemLevel]];
  }
  if (self.hasItemReqLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemReqLevel", [NSNumber numberWithInt:self.itemReqLevel]];
  }
  if (self.hasItemAttack) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemAttack", [NSNumber numberWithInt:self.itemAttack]];
  }
  if (self.hasItemMagic) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMagic", [NSNumber numberWithInt:self.itemMagic]];
  }
  if (self.hasItemHp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemHp", [NSNumber numberWithInt:self.itemHp]];
  }
  if (self.hasItemMp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMp", [NSNumber numberWithInt:self.itemMp]];
  }
  if (self.hasItemLife) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemLife", [NSNumber numberWithInt:self.itemLife]];
  }
  if (self.hasItemFeel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemFeel", [NSNumber numberWithInt:self.itemFeel]];
  }
  if (self.hasItemExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemExp", [NSNumber numberWithInt:self.itemExp]];
  }
  if (self.hasItemVariationRate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemVariationRate", [NSNumber numberWithInt:self.itemVariationRate]];
  }
  if (self.hasItemPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemPower", [NSNumber numberWithInt:self.itemPower]];
  }
  if (self.hasItemAgile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemAgile", [NSNumber numberWithInt:self.itemAgile]];
  }
  if (self.hasItemIntelligence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemIntelligence", [NSNumber numberWithInt:self.itemIntelligence]];
  }
  if (self.hasItemVigour) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemVigour", [NSNumber numberWithInt:self.itemVigour]];
  }
  if (self.hasItemEndur) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemEndur", [NSNumber numberWithInt:self.itemEndur]];
  }
  if (self.hasItemDefense) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDefense", [NSNumber numberWithInt:self.itemDefense]];
  }
  if (self.hasItemMagicDefense) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMagicDefense", [NSNumber numberWithInt:self.itemMagicDefense]];
  }
  if (self.hasItemAttackLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemAttackLevel", [NSNumber numberWithInt:self.itemAttackLevel]];
  }
  if (self.hasItemDefenseLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDefenseLevel", [NSNumber numberWithInt:self.itemDefenseLevel]];
  }
  if (self.hasItemMagicLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMagicLevel", [NSNumber numberWithInt:self.itemMagicLevel]];
  }
  if (self.hasItemMagicDefenseLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemMagicDefenseLevel", [NSNumber numberWithInt:self.itemMagicDefenseLevel]];
  }
  if (self.hasParentType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"parentType", [NSNumber numberWithInt:self.parentType]];
  }
  if (self.hasItemType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemType", [NSNumber numberWithInt:self.itemType]];
  }
  if (self.hasItemInvalidTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemInvalidTime", [NSNumber numberWithInt:self.itemInvalidTime]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  if (self.hasTokenPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tokenPrice", [NSNumber numberWithInt:self.tokenPrice]];
  }
  if (self.hasCoinPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coinPrice", [NSNumber numberWithInt:self.coinPrice]];
  }
  if (self.hasItemElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemElement", [NSNumber numberWithInt:self.itemElement]];
  }
  if (self.hasIsShop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isShop", [NSNumber numberWithInt:self.isShop]];
  }
  if (self.hasCanTrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canTrade", [NSNumber numberWithInt:self.canTrade]];
  }
  if (self.hasCanSell) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canSell", [NSNumber numberWithInt:self.canSell]];
  }
  if (self.hasCanUpgrade) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canUpgrade", [NSNumber numberWithInt:self.canUpgrade]];
  }
  if (self.hasCanComposition) {
    [output appendFormat:@"%@%@: %@\n", indent, @"canComposition", [NSNumber numberWithInt:self.canComposition]];
  }
  if (self.hasMaxNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxNum", [NSNumber numberWithInt:self.maxNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_Item class]]) {
    return NO;
  }
  PP_Item *otherMessage = other;
  return
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasItemName == otherMessage.hasItemName &&
      (!self.hasItemName || [self.itemName isEqual:otherMessage.itemName]) &&
      self.hasItemLevel == otherMessage.hasItemLevel &&
      (!self.hasItemLevel || self.itemLevel == otherMessage.itemLevel) &&
      self.hasItemReqLevel == otherMessage.hasItemReqLevel &&
      (!self.hasItemReqLevel || self.itemReqLevel == otherMessage.itemReqLevel) &&
      self.hasItemAttack == otherMessage.hasItemAttack &&
      (!self.hasItemAttack || self.itemAttack == otherMessage.itemAttack) &&
      self.hasItemMagic == otherMessage.hasItemMagic &&
      (!self.hasItemMagic || self.itemMagic == otherMessage.itemMagic) &&
      self.hasItemHp == otherMessage.hasItemHp &&
      (!self.hasItemHp || self.itemHp == otherMessage.itemHp) &&
      self.hasItemMp == otherMessage.hasItemMp &&
      (!self.hasItemMp || self.itemMp == otherMessage.itemMp) &&
      self.hasItemLife == otherMessage.hasItemLife &&
      (!self.hasItemLife || self.itemLife == otherMessage.itemLife) &&
      self.hasItemFeel == otherMessage.hasItemFeel &&
      (!self.hasItemFeel || self.itemFeel == otherMessage.itemFeel) &&
      self.hasItemExp == otherMessage.hasItemExp &&
      (!self.hasItemExp || self.itemExp == otherMessage.itemExp) &&
      self.hasItemVariationRate == otherMessage.hasItemVariationRate &&
      (!self.hasItemVariationRate || self.itemVariationRate == otherMessage.itemVariationRate) &&
      self.hasItemPower == otherMessage.hasItemPower &&
      (!self.hasItemPower || self.itemPower == otherMessage.itemPower) &&
      self.hasItemAgile == otherMessage.hasItemAgile &&
      (!self.hasItemAgile || self.itemAgile == otherMessage.itemAgile) &&
      self.hasItemIntelligence == otherMessage.hasItemIntelligence &&
      (!self.hasItemIntelligence || self.itemIntelligence == otherMessage.itemIntelligence) &&
      self.hasItemVigour == otherMessage.hasItemVigour &&
      (!self.hasItemVigour || self.itemVigour == otherMessage.itemVigour) &&
      self.hasItemEndur == otherMessage.hasItemEndur &&
      (!self.hasItemEndur || self.itemEndur == otherMessage.itemEndur) &&
      self.hasItemDefense == otherMessage.hasItemDefense &&
      (!self.hasItemDefense || self.itemDefense == otherMessage.itemDefense) &&
      self.hasItemMagicDefense == otherMessage.hasItemMagicDefense &&
      (!self.hasItemMagicDefense || self.itemMagicDefense == otherMessage.itemMagicDefense) &&
      self.hasItemAttackLevel == otherMessage.hasItemAttackLevel &&
      (!self.hasItemAttackLevel || self.itemAttackLevel == otherMessage.itemAttackLevel) &&
      self.hasItemDefenseLevel == otherMessage.hasItemDefenseLevel &&
      (!self.hasItemDefenseLevel || self.itemDefenseLevel == otherMessage.itemDefenseLevel) &&
      self.hasItemMagicLevel == otherMessage.hasItemMagicLevel &&
      (!self.hasItemMagicLevel || self.itemMagicLevel == otherMessage.itemMagicLevel) &&
      self.hasItemMagicDefenseLevel == otherMessage.hasItemMagicDefenseLevel &&
      (!self.hasItemMagicDefenseLevel || self.itemMagicDefenseLevel == otherMessage.itemMagicDefenseLevel) &&
      self.hasParentType == otherMessage.hasParentType &&
      (!self.hasParentType || self.parentType == otherMessage.parentType) &&
      self.hasItemType == otherMessage.hasItemType &&
      (!self.hasItemType || self.itemType == otherMessage.itemType) &&
      self.hasItemInvalidTime == otherMessage.hasItemInvalidTime &&
      (!self.hasItemInvalidTime || self.itemInvalidTime == otherMessage.itemInvalidTime) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasTokenPrice == otherMessage.hasTokenPrice &&
      (!self.hasTokenPrice || self.tokenPrice == otherMessage.tokenPrice) &&
      self.hasCoinPrice == otherMessage.hasCoinPrice &&
      (!self.hasCoinPrice || self.coinPrice == otherMessage.coinPrice) &&
      self.hasItemElement == otherMessage.hasItemElement &&
      (!self.hasItemElement || self.itemElement == otherMessage.itemElement) &&
      self.hasIsShop == otherMessage.hasIsShop &&
      (!self.hasIsShop || self.isShop == otherMessage.isShop) &&
      self.hasCanTrade == otherMessage.hasCanTrade &&
      (!self.hasCanTrade || self.canTrade == otherMessage.canTrade) &&
      self.hasCanSell == otherMessage.hasCanSell &&
      (!self.hasCanSell || self.canSell == otherMessage.canSell) &&
      self.hasCanUpgrade == otherMessage.hasCanUpgrade &&
      (!self.hasCanUpgrade || self.canUpgrade == otherMessage.canUpgrade) &&
      self.hasCanComposition == otherMessage.hasCanComposition &&
      (!self.hasCanComposition || self.canComposition == otherMessage.canComposition) &&
      self.hasMaxNum == otherMessage.hasMaxNum &&
      (!self.hasMaxNum || self.maxNum == otherMessage.maxNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemId] hash];
  }
  if (self.hasItemName) {
    hashCode = hashCode * 31 + [self.itemName hash];
  }
  if (self.hasItemLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemLevel] hash];
  }
  if (self.hasItemReqLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemReqLevel] hash];
  }
  if (self.hasItemAttack) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemAttack] hash];
  }
  if (self.hasItemMagic) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemMagic] hash];
  }
  if (self.hasItemHp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemHp] hash];
  }
  if (self.hasItemMp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemMp] hash];
  }
  if (self.hasItemLife) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemLife] hash];
  }
  if (self.hasItemFeel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemFeel] hash];
  }
  if (self.hasItemExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemExp] hash];
  }
  if (self.hasItemVariationRate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemVariationRate] hash];
  }
  if (self.hasItemPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemPower] hash];
  }
  if (self.hasItemAgile) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemAgile] hash];
  }
  if (self.hasItemIntelligence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemIntelligence] hash];
  }
  if (self.hasItemVigour) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemVigour] hash];
  }
  if (self.hasItemEndur) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemEndur] hash];
  }
  if (self.hasItemDefense) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemDefense] hash];
  }
  if (self.hasItemMagicDefense) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemMagicDefense] hash];
  }
  if (self.hasItemAttackLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemAttackLevel] hash];
  }
  if (self.hasItemDefenseLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemDefenseLevel] hash];
  }
  if (self.hasItemMagicLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemMagicLevel] hash];
  }
  if (self.hasItemMagicDefenseLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemMagicDefenseLevel] hash];
  }
  if (self.hasParentType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.parentType] hash];
  }
  if (self.hasItemType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemType] hash];
  }
  if (self.hasItemInvalidTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemInvalidTime] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  if (self.hasTokenPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.tokenPrice] hash];
  }
  if (self.hasCoinPrice) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.coinPrice] hash];
  }
  if (self.hasItemElement) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.itemElement] hash];
  }
  if (self.hasIsShop) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.isShop] hash];
  }
  if (self.hasCanTrade) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.canTrade] hash];
  }
  if (self.hasCanSell) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.canSell] hash];
  }
  if (self.hasCanUpgrade) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.canUpgrade] hash];
  }
  if (self.hasCanComposition) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.canComposition] hash];
  }
  if (self.hasMaxNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.maxNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_Item_Builder()
@property (retain) PP_Item* result;
@end

@implementation PP_Item_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_Item alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_Item_Builder*) clear {
  self.result = [[[PP_Item alloc] init] autorelease];
  return self;
}
- (PP_Item_Builder*) clone {
  return [PP_Item builderWithPrototype:result];
}
- (PP_Item*) defaultInstance {
  return [PP_Item defaultInstance];
}
- (PP_Item*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_Item*) buildPartial {
  PP_Item* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_Item_Builder*) mergeFrom:(PP_Item*) other {
  if (other == [PP_Item defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasItemName) {
    [self setItemName:other.itemName];
  }
  if (other.hasItemLevel) {
    [self setItemLevel:other.itemLevel];
  }
  if (other.hasItemReqLevel) {
    [self setItemReqLevel:other.itemReqLevel];
  }
  if (other.hasItemAttack) {
    [self setItemAttack:other.itemAttack];
  }
  if (other.hasItemMagic) {
    [self setItemMagic:other.itemMagic];
  }
  if (other.hasItemHp) {
    [self setItemHp:other.itemHp];
  }
  if (other.hasItemMp) {
    [self setItemMp:other.itemMp];
  }
  if (other.hasItemLife) {
    [self setItemLife:other.itemLife];
  }
  if (other.hasItemFeel) {
    [self setItemFeel:other.itemFeel];
  }
  if (other.hasItemExp) {
    [self setItemExp:other.itemExp];
  }
  if (other.hasItemVariationRate) {
    [self setItemVariationRate:other.itemVariationRate];
  }
  if (other.hasItemPower) {
    [self setItemPower:other.itemPower];
  }
  if (other.hasItemAgile) {
    [self setItemAgile:other.itemAgile];
  }
  if (other.hasItemIntelligence) {
    [self setItemIntelligence:other.itemIntelligence];
  }
  if (other.hasItemVigour) {
    [self setItemVigour:other.itemVigour];
  }
  if (other.hasItemEndur) {
    [self setItemEndur:other.itemEndur];
  }
  if (other.hasItemDefense) {
    [self setItemDefense:other.itemDefense];
  }
  if (other.hasItemMagicDefense) {
    [self setItemMagicDefense:other.itemMagicDefense];
  }
  if (other.hasItemAttackLevel) {
    [self setItemAttackLevel:other.itemAttackLevel];
  }
  if (other.hasItemDefenseLevel) {
    [self setItemDefenseLevel:other.itemDefenseLevel];
  }
  if (other.hasItemMagicLevel) {
    [self setItemMagicLevel:other.itemMagicLevel];
  }
  if (other.hasItemMagicDefenseLevel) {
    [self setItemMagicDefenseLevel:other.itemMagicDefenseLevel];
  }
  if (other.hasParentType) {
    [self setParentType:other.parentType];
  }
  if (other.hasItemType) {
    [self setItemType:other.itemType];
  }
  if (other.hasItemInvalidTime) {
    [self setItemInvalidTime:other.itemInvalidTime];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasTokenPrice) {
    [self setTokenPrice:other.tokenPrice];
  }
  if (other.hasCoinPrice) {
    [self setCoinPrice:other.coinPrice];
  }
  if (other.hasItemElement) {
    [self setItemElement:other.itemElement];
  }
  if (other.hasIsShop) {
    [self setIsShop:other.isShop];
  }
  if (other.hasCanTrade) {
    [self setCanTrade:other.canTrade];
  }
  if (other.hasCanSell) {
    [self setCanSell:other.canSell];
  }
  if (other.hasCanUpgrade) {
    [self setCanUpgrade:other.canUpgrade];
  }
  if (other.hasCanComposition) {
    [self setCanComposition:other.canComposition];
  }
  if (other.hasMaxNum) {
    [self setMaxNum:other.maxNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_Item_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 18: {
        [self setItemName:[input readString]];
        break;
      }
      case 24: {
        [self setItemLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setItemReqLevel:[input readInt32]];
        break;
      }
      case 40: {
        [self setItemAttack:[input readInt32]];
        break;
      }
      case 48: {
        [self setItemMagic:[input readInt32]];
        break;
      }
      case 56: {
        [self setItemHp:[input readInt32]];
        break;
      }
      case 64: {
        [self setItemMp:[input readInt32]];
        break;
      }
      case 72: {
        [self setItemLife:[input readInt32]];
        break;
      }
      case 80: {
        [self setItemFeel:[input readInt32]];
        break;
      }
      case 88: {
        [self setItemExp:[input readInt32]];
        break;
      }
      case 96: {
        [self setItemVariationRate:[input readInt32]];
        break;
      }
      case 104: {
        [self setItemPower:[input readInt32]];
        break;
      }
      case 112: {
        [self setItemAgile:[input readInt32]];
        break;
      }
      case 120: {
        [self setItemIntelligence:[input readInt32]];
        break;
      }
      case 128: {
        [self setItemVigour:[input readInt32]];
        break;
      }
      case 136: {
        [self setItemEndur:[input readInt32]];
        break;
      }
      case 144: {
        [self setItemDefense:[input readInt32]];
        break;
      }
      case 152: {
        [self setItemMagicDefense:[input readInt32]];
        break;
      }
      case 160: {
        [self setItemAttackLevel:[input readInt32]];
        break;
      }
      case 168: {
        [self setItemDefenseLevel:[input readInt32]];
        break;
      }
      case 176: {
        [self setItemMagicLevel:[input readInt32]];
        break;
      }
      case 184: {
        [self setItemMagicDefenseLevel:[input readInt32]];
        break;
      }
      case 192: {
        [self setParentType:[input readInt32]];
        break;
      }
      case 200: {
        [self setItemType:[input readInt32]];
        break;
      }
      case 208: {
        [self setItemInvalidTime:[input readInt32]];
        break;
      }
      case 216: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 224: {
        [self setTokenPrice:[input readInt32]];
        break;
      }
      case 232: {
        [self setCoinPrice:[input readInt32]];
        break;
      }
      case 240: {
        [self setItemElement:[input readInt32]];
        break;
      }
      case 248: {
        [self setIsShop:[input readInt32]];
        break;
      }
      case 256: {
        [self setCanTrade:[input readInt32]];
        break;
      }
      case 264: {
        [self setCanSell:[input readInt32]];
        break;
      }
      case 272: {
        [self setCanUpgrade:[input readInt32]];
        break;
      }
      case 280: {
        [self setCanComposition:[input readInt32]];
        break;
      }
      case 288: {
        [self setMaxNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (PP_Item_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (PP_Item_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasItemName {
  return result.hasItemName;
}
- (NSString*) itemName {
  return result.itemName;
}
- (PP_Item_Builder*) setItemName:(NSString*) value {
  result.hasItemName = YES;
  result.itemName = value;
  return self;
}
- (PP_Item_Builder*) clearItemName {
  result.hasItemName = NO;
  result.itemName = @"";
  return self;
}
- (BOOL) hasItemLevel {
  return result.hasItemLevel;
}
- (int32_t) itemLevel {
  return result.itemLevel;
}
- (PP_Item_Builder*) setItemLevel:(int32_t) value {
  result.hasItemLevel = YES;
  result.itemLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemLevel {
  result.hasItemLevel = NO;
  result.itemLevel = 0;
  return self;
}
- (BOOL) hasItemReqLevel {
  return result.hasItemReqLevel;
}
- (int32_t) itemReqLevel {
  return result.itemReqLevel;
}
- (PP_Item_Builder*) setItemReqLevel:(int32_t) value {
  result.hasItemReqLevel = YES;
  result.itemReqLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemReqLevel {
  result.hasItemReqLevel = NO;
  result.itemReqLevel = 0;
  return self;
}
- (BOOL) hasItemAttack {
  return result.hasItemAttack;
}
- (int32_t) itemAttack {
  return result.itemAttack;
}
- (PP_Item_Builder*) setItemAttack:(int32_t) value {
  result.hasItemAttack = YES;
  result.itemAttack = value;
  return self;
}
- (PP_Item_Builder*) clearItemAttack {
  result.hasItemAttack = NO;
  result.itemAttack = 0;
  return self;
}
- (BOOL) hasItemMagic {
  return result.hasItemMagic;
}
- (int32_t) itemMagic {
  return result.itemMagic;
}
- (PP_Item_Builder*) setItemMagic:(int32_t) value {
  result.hasItemMagic = YES;
  result.itemMagic = value;
  return self;
}
- (PP_Item_Builder*) clearItemMagic {
  result.hasItemMagic = NO;
  result.itemMagic = 0;
  return self;
}
- (BOOL) hasItemHp {
  return result.hasItemHp;
}
- (int32_t) itemHp {
  return result.itemHp;
}
- (PP_Item_Builder*) setItemHp:(int32_t) value {
  result.hasItemHp = YES;
  result.itemHp = value;
  return self;
}
- (PP_Item_Builder*) clearItemHp {
  result.hasItemHp = NO;
  result.itemHp = 0;
  return self;
}
- (BOOL) hasItemMp {
  return result.hasItemMp;
}
- (int32_t) itemMp {
  return result.itemMp;
}
- (PP_Item_Builder*) setItemMp:(int32_t) value {
  result.hasItemMp = YES;
  result.itemMp = value;
  return self;
}
- (PP_Item_Builder*) clearItemMp {
  result.hasItemMp = NO;
  result.itemMp = 0;
  return self;
}
- (BOOL) hasItemLife {
  return result.hasItemLife;
}
- (int32_t) itemLife {
  return result.itemLife;
}
- (PP_Item_Builder*) setItemLife:(int32_t) value {
  result.hasItemLife = YES;
  result.itemLife = value;
  return self;
}
- (PP_Item_Builder*) clearItemLife {
  result.hasItemLife = NO;
  result.itemLife = 0;
  return self;
}
- (BOOL) hasItemFeel {
  return result.hasItemFeel;
}
- (int32_t) itemFeel {
  return result.itemFeel;
}
- (PP_Item_Builder*) setItemFeel:(int32_t) value {
  result.hasItemFeel = YES;
  result.itemFeel = value;
  return self;
}
- (PP_Item_Builder*) clearItemFeel {
  result.hasItemFeel = NO;
  result.itemFeel = 0;
  return self;
}
- (BOOL) hasItemExp {
  return result.hasItemExp;
}
- (int32_t) itemExp {
  return result.itemExp;
}
- (PP_Item_Builder*) setItemExp:(int32_t) value {
  result.hasItemExp = YES;
  result.itemExp = value;
  return self;
}
- (PP_Item_Builder*) clearItemExp {
  result.hasItemExp = NO;
  result.itemExp = 0;
  return self;
}
- (BOOL) hasItemVariationRate {
  return result.hasItemVariationRate;
}
- (int32_t) itemVariationRate {
  return result.itemVariationRate;
}
- (PP_Item_Builder*) setItemVariationRate:(int32_t) value {
  result.hasItemVariationRate = YES;
  result.itemVariationRate = value;
  return self;
}
- (PP_Item_Builder*) clearItemVariationRate {
  result.hasItemVariationRate = NO;
  result.itemVariationRate = 0;
  return self;
}
- (BOOL) hasItemPower {
  return result.hasItemPower;
}
- (int32_t) itemPower {
  return result.itemPower;
}
- (PP_Item_Builder*) setItemPower:(int32_t) value {
  result.hasItemPower = YES;
  result.itemPower = value;
  return self;
}
- (PP_Item_Builder*) clearItemPower {
  result.hasItemPower = NO;
  result.itemPower = 0;
  return self;
}
- (BOOL) hasItemAgile {
  return result.hasItemAgile;
}
- (int32_t) itemAgile {
  return result.itemAgile;
}
- (PP_Item_Builder*) setItemAgile:(int32_t) value {
  result.hasItemAgile = YES;
  result.itemAgile = value;
  return self;
}
- (PP_Item_Builder*) clearItemAgile {
  result.hasItemAgile = NO;
  result.itemAgile = 0;
  return self;
}
- (BOOL) hasItemIntelligence {
  return result.hasItemIntelligence;
}
- (int32_t) itemIntelligence {
  return result.itemIntelligence;
}
- (PP_Item_Builder*) setItemIntelligence:(int32_t) value {
  result.hasItemIntelligence = YES;
  result.itemIntelligence = value;
  return self;
}
- (PP_Item_Builder*) clearItemIntelligence {
  result.hasItemIntelligence = NO;
  result.itemIntelligence = 0;
  return self;
}
- (BOOL) hasItemVigour {
  return result.hasItemVigour;
}
- (int32_t) itemVigour {
  return result.itemVigour;
}
- (PP_Item_Builder*) setItemVigour:(int32_t) value {
  result.hasItemVigour = YES;
  result.itemVigour = value;
  return self;
}
- (PP_Item_Builder*) clearItemVigour {
  result.hasItemVigour = NO;
  result.itemVigour = 0;
  return self;
}
- (BOOL) hasItemEndur {
  return result.hasItemEndur;
}
- (int32_t) itemEndur {
  return result.itemEndur;
}
- (PP_Item_Builder*) setItemEndur:(int32_t) value {
  result.hasItemEndur = YES;
  result.itemEndur = value;
  return self;
}
- (PP_Item_Builder*) clearItemEndur {
  result.hasItemEndur = NO;
  result.itemEndur = 0;
  return self;
}
- (BOOL) hasItemDefense {
  return result.hasItemDefense;
}
- (int32_t) itemDefense {
  return result.itemDefense;
}
- (PP_Item_Builder*) setItemDefense:(int32_t) value {
  result.hasItemDefense = YES;
  result.itemDefense = value;
  return self;
}
- (PP_Item_Builder*) clearItemDefense {
  result.hasItemDefense = NO;
  result.itemDefense = 0;
  return self;
}
- (BOOL) hasItemMagicDefense {
  return result.hasItemMagicDefense;
}
- (int32_t) itemMagicDefense {
  return result.itemMagicDefense;
}
- (PP_Item_Builder*) setItemMagicDefense:(int32_t) value {
  result.hasItemMagicDefense = YES;
  result.itemMagicDefense = value;
  return self;
}
- (PP_Item_Builder*) clearItemMagicDefense {
  result.hasItemMagicDefense = NO;
  result.itemMagicDefense = 0;
  return self;
}
- (BOOL) hasItemAttackLevel {
  return result.hasItemAttackLevel;
}
- (int32_t) itemAttackLevel {
  return result.itemAttackLevel;
}
- (PP_Item_Builder*) setItemAttackLevel:(int32_t) value {
  result.hasItemAttackLevel = YES;
  result.itemAttackLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemAttackLevel {
  result.hasItemAttackLevel = NO;
  result.itemAttackLevel = 0;
  return self;
}
- (BOOL) hasItemDefenseLevel {
  return result.hasItemDefenseLevel;
}
- (int32_t) itemDefenseLevel {
  return result.itemDefenseLevel;
}
- (PP_Item_Builder*) setItemDefenseLevel:(int32_t) value {
  result.hasItemDefenseLevel = YES;
  result.itemDefenseLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemDefenseLevel {
  result.hasItemDefenseLevel = NO;
  result.itemDefenseLevel = 0;
  return self;
}
- (BOOL) hasItemMagicLevel {
  return result.hasItemMagicLevel;
}
- (int32_t) itemMagicLevel {
  return result.itemMagicLevel;
}
- (PP_Item_Builder*) setItemMagicLevel:(int32_t) value {
  result.hasItemMagicLevel = YES;
  result.itemMagicLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemMagicLevel {
  result.hasItemMagicLevel = NO;
  result.itemMagicLevel = 0;
  return self;
}
- (BOOL) hasItemMagicDefenseLevel {
  return result.hasItemMagicDefenseLevel;
}
- (int32_t) itemMagicDefenseLevel {
  return result.itemMagicDefenseLevel;
}
- (PP_Item_Builder*) setItemMagicDefenseLevel:(int32_t) value {
  result.hasItemMagicDefenseLevel = YES;
  result.itemMagicDefenseLevel = value;
  return self;
}
- (PP_Item_Builder*) clearItemMagicDefenseLevel {
  result.hasItemMagicDefenseLevel = NO;
  result.itemMagicDefenseLevel = 0;
  return self;
}
- (BOOL) hasParentType {
  return result.hasParentType;
}
- (int32_t) parentType {
  return result.parentType;
}
- (PP_Item_Builder*) setParentType:(int32_t) value {
  result.hasParentType = YES;
  result.parentType = value;
  return self;
}
- (PP_Item_Builder*) clearParentType {
  result.hasParentType = NO;
  result.parentType = 0;
  return self;
}
- (BOOL) hasItemType {
  return result.hasItemType;
}
- (int32_t) itemType {
  return result.itemType;
}
- (PP_Item_Builder*) setItemType:(int32_t) value {
  result.hasItemType = YES;
  result.itemType = value;
  return self;
}
- (PP_Item_Builder*) clearItemType {
  result.hasItemType = NO;
  result.itemType = 0;
  return self;
}
- (BOOL) hasItemInvalidTime {
  return result.hasItemInvalidTime;
}
- (int32_t) itemInvalidTime {
  return result.itemInvalidTime;
}
- (PP_Item_Builder*) setItemInvalidTime:(int32_t) value {
  result.hasItemInvalidTime = YES;
  result.itemInvalidTime = value;
  return self;
}
- (PP_Item_Builder*) clearItemInvalidTime {
  result.hasItemInvalidTime = NO;
  result.itemInvalidTime = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PP_Item_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PP_Item_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (BOOL) hasTokenPrice {
  return result.hasTokenPrice;
}
- (int32_t) tokenPrice {
  return result.tokenPrice;
}
- (PP_Item_Builder*) setTokenPrice:(int32_t) value {
  result.hasTokenPrice = YES;
  result.tokenPrice = value;
  return self;
}
- (PP_Item_Builder*) clearTokenPrice {
  result.hasTokenPrice = NO;
  result.tokenPrice = 0;
  return self;
}
- (BOOL) hasCoinPrice {
  return result.hasCoinPrice;
}
- (int32_t) coinPrice {
  return result.coinPrice;
}
- (PP_Item_Builder*) setCoinPrice:(int32_t) value {
  result.hasCoinPrice = YES;
  result.coinPrice = value;
  return self;
}
- (PP_Item_Builder*) clearCoinPrice {
  result.hasCoinPrice = NO;
  result.coinPrice = 0;
  return self;
}
- (BOOL) hasItemElement {
  return result.hasItemElement;
}
- (int32_t) itemElement {
  return result.itemElement;
}
- (PP_Item_Builder*) setItemElement:(int32_t) value {
  result.hasItemElement = YES;
  result.itemElement = value;
  return self;
}
- (PP_Item_Builder*) clearItemElement {
  result.hasItemElement = NO;
  result.itemElement = 0;
  return self;
}
- (BOOL) hasIsShop {
  return result.hasIsShop;
}
- (int32_t) isShop {
  return result.isShop;
}
- (PP_Item_Builder*) setIsShop:(int32_t) value {
  result.hasIsShop = YES;
  result.isShop = value;
  return self;
}
- (PP_Item_Builder*) clearIsShop {
  result.hasIsShop = NO;
  result.isShop = 0;
  return self;
}
- (BOOL) hasCanTrade {
  return result.hasCanTrade;
}
- (int32_t) canTrade {
  return result.canTrade;
}
- (PP_Item_Builder*) setCanTrade:(int32_t) value {
  result.hasCanTrade = YES;
  result.canTrade = value;
  return self;
}
- (PP_Item_Builder*) clearCanTrade {
  result.hasCanTrade = NO;
  result.canTrade = 0;
  return self;
}
- (BOOL) hasCanSell {
  return result.hasCanSell;
}
- (int32_t) canSell {
  return result.canSell;
}
- (PP_Item_Builder*) setCanSell:(int32_t) value {
  result.hasCanSell = YES;
  result.canSell = value;
  return self;
}
- (PP_Item_Builder*) clearCanSell {
  result.hasCanSell = NO;
  result.canSell = 0;
  return self;
}
- (BOOL) hasCanUpgrade {
  return result.hasCanUpgrade;
}
- (int32_t) canUpgrade {
  return result.canUpgrade;
}
- (PP_Item_Builder*) setCanUpgrade:(int32_t) value {
  result.hasCanUpgrade = YES;
  result.canUpgrade = value;
  return self;
}
- (PP_Item_Builder*) clearCanUpgrade {
  result.hasCanUpgrade = NO;
  result.canUpgrade = 0;
  return self;
}
- (BOOL) hasCanComposition {
  return result.hasCanComposition;
}
- (int32_t) canComposition {
  return result.canComposition;
}
- (PP_Item_Builder*) setCanComposition:(int32_t) value {
  result.hasCanComposition = YES;
  result.canComposition = value;
  return self;
}
- (PP_Item_Builder*) clearCanComposition {
  result.hasCanComposition = NO;
  result.canComposition = 0;
  return self;
}
- (BOOL) hasMaxNum {
  return result.hasMaxNum;
}
- (int32_t) maxNum {
  return result.maxNum;
}
- (PP_Item_Builder*) setMaxNum:(int32_t) value {
  result.hasMaxNum = YES;
  result.maxNum = value;
  return self;
}
- (PP_Item_Builder*) clearMaxNum {
  result.hasMaxNum = NO;
  result.maxNum = 0;
  return self;
}
@end

