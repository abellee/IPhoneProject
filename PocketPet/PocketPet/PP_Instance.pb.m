// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_Instance.pb.h"

@implementation PpInstanceRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpInstanceRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PpInstanceDataRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_Instance ()
@property int32_t instanceId;
@property (retain) NSString* instanceName;
@property int32_t requireLevel;
@property int32_t requireNum;
@property int32_t requireTask;
@property int32_t requireElement;
@property int32_t totalGate;
@property int32_t createTime;
@property (retain) PBAppendableArray * instanceDataListArray;
@end

@implementation PP_Instance

- (BOOL) hasInstanceId {
  return !!hasInstanceId_;
}
- (void) setHasInstanceId:(BOOL) value_ {
  hasInstanceId_ = !!value_;
}
@synthesize instanceId;
- (BOOL) hasInstanceName {
  return !!hasInstanceName_;
}
- (void) setHasInstanceName:(BOOL) value_ {
  hasInstanceName_ = !!value_;
}
@synthesize instanceName;
- (BOOL) hasRequireLevel {
  return !!hasRequireLevel_;
}
- (void) setHasRequireLevel:(BOOL) value_ {
  hasRequireLevel_ = !!value_;
}
@synthesize requireLevel;
- (BOOL) hasRequireNum {
  return !!hasRequireNum_;
}
- (void) setHasRequireNum:(BOOL) value_ {
  hasRequireNum_ = !!value_;
}
@synthesize requireNum;
- (BOOL) hasRequireTask {
  return !!hasRequireTask_;
}
- (void) setHasRequireTask:(BOOL) value_ {
  hasRequireTask_ = !!value_;
}
@synthesize requireTask;
- (BOOL) hasRequireElement {
  return !!hasRequireElement_;
}
- (void) setHasRequireElement:(BOOL) value_ {
  hasRequireElement_ = !!value_;
}
@synthesize requireElement;
- (BOOL) hasTotalGate {
  return !!hasTotalGate_;
}
- (void) setHasTotalGate:(BOOL) value_ {
  hasTotalGate_ = !!value_;
}
@synthesize totalGate;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
@synthesize instanceDataListArray;
@dynamic instanceDataList;
- (void) dealloc {
  self.instanceName = nil;
  self.instanceDataListArray = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.instanceId = 0;
    self.instanceName = @"";
    self.requireLevel = 0;
    self.requireNum = 0;
    self.requireTask = 0;
    self.requireElement = 0;
    self.totalGate = 0;
    self.createTime = 0;
  }
  return self;
}
static PP_Instance* defaultPP_InstanceInstance = nil;
+ (void) initialize {
  if (self == [PP_Instance class]) {
    defaultPP_InstanceInstance = [[PP_Instance alloc] init];
  }
}
+ (PP_Instance*) defaultInstance {
  return defaultPP_InstanceInstance;
}
- (PP_Instance*) defaultInstance {
  return defaultPP_InstanceInstance;
}
- (PBArray *)instanceDataList {
  return instanceDataListArray;
}
- (PP_InstanceData*)instanceDataListAtIndex:(NSUInteger)index {
  return [instanceDataListArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInstanceId) {
    [output writeInt32:1 value:self.instanceId];
  }
  if (self.hasInstanceName) {
    [output writeString:2 value:self.instanceName];
  }
  if (self.hasRequireLevel) {
    [output writeInt32:3 value:self.requireLevel];
  }
  if (self.hasRequireNum) {
    [output writeInt32:4 value:self.requireNum];
  }
  if (self.hasRequireTask) {
    [output writeInt32:5 value:self.requireTask];
  }
  if (self.hasRequireElement) {
    [output writeInt32:6 value:self.requireElement];
  }
  if (self.hasTotalGate) {
    [output writeInt32:7 value:self.totalGate];
  }
  if (self.hasCreateTime) {
    [output writeInt32:8 value:self.createTime];
  }
  for (PP_InstanceData *element in self.instanceDataListArray) {
    [output writeMessage:9 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInstanceId) {
    size_ += computeInt32Size(1, self.instanceId);
  }
  if (self.hasInstanceName) {
    size_ += computeStringSize(2, self.instanceName);
  }
  if (self.hasRequireLevel) {
    size_ += computeInt32Size(3, self.requireLevel);
  }
  if (self.hasRequireNum) {
    size_ += computeInt32Size(4, self.requireNum);
  }
  if (self.hasRequireTask) {
    size_ += computeInt32Size(5, self.requireTask);
  }
  if (self.hasRequireElement) {
    size_ += computeInt32Size(6, self.requireElement);
  }
  if (self.hasTotalGate) {
    size_ += computeInt32Size(7, self.totalGate);
  }
  if (self.hasCreateTime) {
    size_ += computeInt32Size(8, self.createTime);
  }
  for (PP_InstanceData *element in self.instanceDataListArray) {
    size_ += computeMessageSize(9, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_Instance*) parseFromData:(NSData*) data {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromData:data] build];
}
+ (PP_Instance*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_Instance*) parseFromInputStream:(NSInputStream*) input {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromInputStream:input] build];
}
+ (PP_Instance*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Instance*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromCodedInputStream:input] build];
}
+ (PP_Instance*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_Instance*)[[[PP_Instance builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_Instance_Builder*) builder {
  return [[[PP_Instance_Builder alloc] init] autorelease];
}
+ (PP_Instance_Builder*) builderWithPrototype:(PP_Instance*) prototype {
  return [[PP_Instance builder] mergeFrom:prototype];
}
- (PP_Instance_Builder*) builder {
  return [PP_Instance builder];
}
- (PP_Instance_Builder*) toBuilder {
  return [PP_Instance builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInstanceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instanceId", [NSNumber numberWithInt:self.instanceId]];
  }
  if (self.hasInstanceName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"instanceName", self.instanceName];
  }
  if (self.hasRequireLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireLevel", [NSNumber numberWithInt:self.requireLevel]];
  }
  if (self.hasRequireNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireNum", [NSNumber numberWithInt:self.requireNum]];
  }
  if (self.hasRequireTask) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireTask", [NSNumber numberWithInt:self.requireTask]];
  }
  if (self.hasRequireElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requireElement", [NSNumber numberWithInt:self.requireElement]];
  }
  if (self.hasTotalGate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalGate", [NSNumber numberWithInt:self.totalGate]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInt:self.createTime]];
  }
  for (PP_InstanceData* element in self.instanceDataListArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"instanceDataList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_Instance class]]) {
    return NO;
  }
  PP_Instance *otherMessage = other;
  return
      self.hasInstanceId == otherMessage.hasInstanceId &&
      (!self.hasInstanceId || self.instanceId == otherMessage.instanceId) &&
      self.hasInstanceName == otherMessage.hasInstanceName &&
      (!self.hasInstanceName || [self.instanceName isEqual:otherMessage.instanceName]) &&
      self.hasRequireLevel == otherMessage.hasRequireLevel &&
      (!self.hasRequireLevel || self.requireLevel == otherMessage.requireLevel) &&
      self.hasRequireNum == otherMessage.hasRequireNum &&
      (!self.hasRequireNum || self.requireNum == otherMessage.requireNum) &&
      self.hasRequireTask == otherMessage.hasRequireTask &&
      (!self.hasRequireTask || self.requireTask == otherMessage.requireTask) &&
      self.hasRequireElement == otherMessage.hasRequireElement &&
      (!self.hasRequireElement || self.requireElement == otherMessage.requireElement) &&
      self.hasTotalGate == otherMessage.hasTotalGate &&
      (!self.hasTotalGate || self.totalGate == otherMessage.totalGate) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      [self.instanceDataListArray isEqualToArray:otherMessage.instanceDataListArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasInstanceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.instanceId] hash];
  }
  if (self.hasInstanceName) {
    hashCode = hashCode * 31 + [self.instanceName hash];
  }
  if (self.hasRequireLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireLevel] hash];
  }
  if (self.hasRequireNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireNum] hash];
  }
  if (self.hasRequireTask) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireTask] hash];
  }
  if (self.hasRequireElement) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.requireElement] hash];
  }
  if (self.hasTotalGate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.totalGate] hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.createTime] hash];
  }
  for (PP_InstanceData* element in self.instanceDataListArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_Instance_Builder()
@property (retain) PP_Instance* result;
@end

@implementation PP_Instance_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_Instance alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_Instance_Builder*) clear {
  self.result = [[[PP_Instance alloc] init] autorelease];
  return self;
}
- (PP_Instance_Builder*) clone {
  return [PP_Instance builderWithPrototype:result];
}
- (PP_Instance*) defaultInstance {
  return [PP_Instance defaultInstance];
}
- (PP_Instance*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_Instance*) buildPartial {
  PP_Instance* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_Instance_Builder*) mergeFrom:(PP_Instance*) other {
  if (other == [PP_Instance defaultInstance]) {
    return self;
  }
  if (other.hasInstanceId) {
    [self setInstanceId:other.instanceId];
  }
  if (other.hasInstanceName) {
    [self setInstanceName:other.instanceName];
  }
  if (other.hasRequireLevel) {
    [self setRequireLevel:other.requireLevel];
  }
  if (other.hasRequireNum) {
    [self setRequireNum:other.requireNum];
  }
  if (other.hasRequireTask) {
    [self setRequireTask:other.requireTask];
  }
  if (other.hasRequireElement) {
    [self setRequireElement:other.requireElement];
  }
  if (other.hasTotalGate) {
    [self setTotalGate:other.totalGate];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.instanceDataListArray.count > 0) {
    if (result.instanceDataListArray == nil) {
      result.instanceDataListArray = [[other.instanceDataListArray copyWithZone:[other.instanceDataListArray zone]] autorelease];
    } else {
      [result.instanceDataListArray appendArray:other.instanceDataListArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_Instance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_Instance_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInstanceId:[input readInt32]];
        break;
      }
      case 18: {
        [self setInstanceName:[input readString]];
        break;
      }
      case 24: {
        [self setRequireLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setRequireNum:[input readInt32]];
        break;
      }
      case 40: {
        [self setRequireTask:[input readInt32]];
        break;
      }
      case 48: {
        [self setRequireElement:[input readInt32]];
        break;
      }
      case 56: {
        [self setTotalGate:[input readInt32]];
        break;
      }
      case 64: {
        [self setCreateTime:[input readInt32]];
        break;
      }
      case 74: {
        PP_InstanceData_Builder* subBuilder = [PP_InstanceData builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInstanceDataList:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasInstanceId {
  return result.hasInstanceId;
}
- (int32_t) instanceId {
  return result.instanceId;
}
- (PP_Instance_Builder*) setInstanceId:(int32_t) value {
  result.hasInstanceId = YES;
  result.instanceId = value;
  return self;
}
- (PP_Instance_Builder*) clearInstanceId {
  result.hasInstanceId = NO;
  result.instanceId = 0;
  return self;
}
- (BOOL) hasInstanceName {
  return result.hasInstanceName;
}
- (NSString*) instanceName {
  return result.instanceName;
}
- (PP_Instance_Builder*) setInstanceName:(NSString*) value {
  result.hasInstanceName = YES;
  result.instanceName = value;
  return self;
}
- (PP_Instance_Builder*) clearInstanceName {
  result.hasInstanceName = NO;
  result.instanceName = @"";
  return self;
}
- (BOOL) hasRequireLevel {
  return result.hasRequireLevel;
}
- (int32_t) requireLevel {
  return result.requireLevel;
}
- (PP_Instance_Builder*) setRequireLevel:(int32_t) value {
  result.hasRequireLevel = YES;
  result.requireLevel = value;
  return self;
}
- (PP_Instance_Builder*) clearRequireLevel {
  result.hasRequireLevel = NO;
  result.requireLevel = 0;
  return self;
}
- (BOOL) hasRequireNum {
  return result.hasRequireNum;
}
- (int32_t) requireNum {
  return result.requireNum;
}
- (PP_Instance_Builder*) setRequireNum:(int32_t) value {
  result.hasRequireNum = YES;
  result.requireNum = value;
  return self;
}
- (PP_Instance_Builder*) clearRequireNum {
  result.hasRequireNum = NO;
  result.requireNum = 0;
  return self;
}
- (BOOL) hasRequireTask {
  return result.hasRequireTask;
}
- (int32_t) requireTask {
  return result.requireTask;
}
- (PP_Instance_Builder*) setRequireTask:(int32_t) value {
  result.hasRequireTask = YES;
  result.requireTask = value;
  return self;
}
- (PP_Instance_Builder*) clearRequireTask {
  result.hasRequireTask = NO;
  result.requireTask = 0;
  return self;
}
- (BOOL) hasRequireElement {
  return result.hasRequireElement;
}
- (int32_t) requireElement {
  return result.requireElement;
}
- (PP_Instance_Builder*) setRequireElement:(int32_t) value {
  result.hasRequireElement = YES;
  result.requireElement = value;
  return self;
}
- (PP_Instance_Builder*) clearRequireElement {
  result.hasRequireElement = NO;
  result.requireElement = 0;
  return self;
}
- (BOOL) hasTotalGate {
  return result.hasTotalGate;
}
- (int32_t) totalGate {
  return result.totalGate;
}
- (PP_Instance_Builder*) setTotalGate:(int32_t) value {
  result.hasTotalGate = YES;
  result.totalGate = value;
  return self;
}
- (PP_Instance_Builder*) clearTotalGate {
  result.hasTotalGate = NO;
  result.totalGate = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (PP_Instance_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (PP_Instance_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
- (PBAppendableArray *)instanceDataList {
  return result.instanceDataListArray;
}
- (PP_InstanceData*)instanceDataListAtIndex:(NSUInteger)index {
  return [result instanceDataListAtIndex:index];
}
- (PP_Instance_Builder *)addInstanceDataList:(PP_InstanceData*)value {
  if (result.instanceDataListArray == nil) {
    result.instanceDataListArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.instanceDataListArray addObject:value];
  return self;
}
- (PP_Instance_Builder *)setInstanceDataListArray:(NSArray *)array {
  result.instanceDataListArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Instance_Builder *)setInstanceDataListValues:(const PP_InstanceData* *)values count:(NSUInteger)count {
  result.instanceDataListArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_Instance_Builder *)clearInstanceDataList {
  result.instanceDataListArray = nil;
  return self;
}
@end

