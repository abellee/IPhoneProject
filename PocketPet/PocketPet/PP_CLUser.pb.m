// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "PP_CLUser.pb.h"

@implementation PpCluserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PpCluserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [PpAccTimeRoot registerAllExtensions:registry];
    [PpLocationRoot registerAllExtensions:registry];
    [PpPetRoot registerAllExtensions:registry];
    [PpTaskRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface PP_CLUser ()
@property int32_t uid;
@property int32_t version;
@property (retain) NSString* nickname;
@property (retain) NSString* avatarImg;
@property (retain) NSString* signature;
@property (retain) NSString* hobby;
@property int32_t sex;
@property int32_t age;
@property int32_t constellation;
@property uint64_t birthday;
@property int32_t nation;
@property int32_t province;
@property int32_t city;
@property uint64_t telephone;
@property int32_t coin;
@property int32_t token;
@property int32_t level;
@property int32_t country;
@property int32_t resourceNum;
@property int32_t petNum;
@property int32_t bagNum;
@property int32_t bloodType;
@property (retain) NSString* job;
@property (retain) PBAppendableArray * petsArray;
@property (retain) PBAppendableArray * tasksArray;
@property (retain) PP_AccTime* accTime;
@property (retain) PP_Location* homeLocation;
@property (retain) PP_Location* location;
@end

@implementation PP_CLUser

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) value_ {
  hasUid_ = !!value_;
}
@synthesize uid;
- (BOOL) hasVersion {
  return !!hasVersion_;
}
- (void) setHasVersion:(BOOL) value_ {
  hasVersion_ = !!value_;
}
@synthesize version;
- (BOOL) hasNickname {
  return !!hasNickname_;
}
- (void) setHasNickname:(BOOL) value_ {
  hasNickname_ = !!value_;
}
@synthesize nickname;
- (BOOL) hasAvatarImg {
  return !!hasAvatarImg_;
}
- (void) setHasAvatarImg:(BOOL) value_ {
  hasAvatarImg_ = !!value_;
}
@synthesize avatarImg;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) value_ {
  hasSignature_ = !!value_;
}
@synthesize signature;
- (BOOL) hasHobby {
  return !!hasHobby_;
}
- (void) setHasHobby:(BOOL) value_ {
  hasHobby_ = !!value_;
}
@synthesize hobby;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) value_ {
  hasSex_ = !!value_;
}
@synthesize sex;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (BOOL) hasConstellation {
  return !!hasConstellation_;
}
- (void) setHasConstellation:(BOOL) value_ {
  hasConstellation_ = !!value_;
}
@synthesize constellation;
- (BOOL) hasBirthday {
  return !!hasBirthday_;
}
- (void) setHasBirthday:(BOOL) value_ {
  hasBirthday_ = !!value_;
}
@synthesize birthday;
- (BOOL) hasNation {
  return !!hasNation_;
}
- (void) setHasNation:(BOOL) value_ {
  hasNation_ = !!value_;
}
@synthesize nation;
- (BOOL) hasProvince {
  return !!hasProvince_;
}
- (void) setHasProvince:(BOOL) value_ {
  hasProvince_ = !!value_;
}
@synthesize province;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) value_ {
  hasCity_ = !!value_;
}
@synthesize city;
- (BOOL) hasTelephone {
  return !!hasTelephone_;
}
- (void) setHasTelephone:(BOOL) value_ {
  hasTelephone_ = !!value_;
}
@synthesize telephone;
- (BOOL) hasCoin {
  return !!hasCoin_;
}
- (void) setHasCoin:(BOOL) value_ {
  hasCoin_ = !!value_;
}
@synthesize coin;
- (BOOL) hasToken {
  return !!hasToken_;
}
- (void) setHasToken:(BOOL) value_ {
  hasToken_ = !!value_;
}
@synthesize token;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) value_ {
  hasCountry_ = !!value_;
}
@synthesize country;
- (BOOL) hasResourceNum {
  return !!hasResourceNum_;
}
- (void) setHasResourceNum:(BOOL) value_ {
  hasResourceNum_ = !!value_;
}
@synthesize resourceNum;
- (BOOL) hasPetNum {
  return !!hasPetNum_;
}
- (void) setHasPetNum:(BOOL) value_ {
  hasPetNum_ = !!value_;
}
@synthesize petNum;
- (BOOL) hasBagNum {
  return !!hasBagNum_;
}
- (void) setHasBagNum:(BOOL) value_ {
  hasBagNum_ = !!value_;
}
@synthesize bagNum;
- (BOOL) hasBloodType {
  return !!hasBloodType_;
}
- (void) setHasBloodType:(BOOL) value_ {
  hasBloodType_ = !!value_;
}
@synthesize bloodType;
- (BOOL) hasJob {
  return !!hasJob_;
}
- (void) setHasJob:(BOOL) value_ {
  hasJob_ = !!value_;
}
@synthesize job;
@synthesize petsArray;
@dynamic pets;
@synthesize tasksArray;
@dynamic tasks;
- (BOOL) hasAccTime {
  return !!hasAccTime_;
}
- (void) setHasAccTime:(BOOL) value_ {
  hasAccTime_ = !!value_;
}
@synthesize accTime;
- (BOOL) hasHomeLocation {
  return !!hasHomeLocation_;
}
- (void) setHasHomeLocation:(BOOL) value_ {
  hasHomeLocation_ = !!value_;
}
@synthesize homeLocation;
- (BOOL) hasLocation {
  return !!hasLocation_;
}
- (void) setHasLocation:(BOOL) value_ {
  hasLocation_ = !!value_;
}
@synthesize location;
- (void) dealloc {
  self.nickname = nil;
  self.avatarImg = nil;
  self.signature = nil;
  self.hobby = nil;
  self.job = nil;
  self.petsArray = nil;
  self.tasksArray = nil;
  self.accTime = nil;
  self.homeLocation = nil;
  self.location = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.uid = 0;
    self.version = 0;
    self.nickname = @"";
    self.avatarImg = @"";
    self.signature = @"";
    self.hobby = @"";
    self.sex = 0;
    self.age = 0;
    self.constellation = 0;
    self.birthday = 0L;
    self.nation = 0;
    self.province = 0;
    self.city = 0;
    self.telephone = 0L;
    self.coin = 0;
    self.token = 0;
    self.level = 0;
    self.country = 0;
    self.resourceNum = 0;
    self.petNum = 0;
    self.bagNum = 0;
    self.bloodType = 0;
    self.job = @"";
    self.accTime = [PP_AccTime defaultInstance];
    self.homeLocation = [PP_Location defaultInstance];
    self.location = [PP_Location defaultInstance];
  }
  return self;
}
static PP_CLUser* defaultPP_CLUserInstance = nil;
+ (void) initialize {
  if (self == [PP_CLUser class]) {
    defaultPP_CLUserInstance = [[PP_CLUser alloc] init];
  }
}
+ (PP_CLUser*) defaultInstance {
  return defaultPP_CLUserInstance;
}
- (PP_CLUser*) defaultInstance {
  return defaultPP_CLUserInstance;
}
- (PBArray *)pets {
  return petsArray;
}
- (PP_Pet*)petsAtIndex:(NSUInteger)index {
  return [petsArray objectAtIndex:index];
}
- (PBArray *)tasks {
  return tasksArray;
}
- (PP_Task*)tasksAtIndex:(NSUInteger)index {
  return [tasksArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeInt32:1 value:self.uid];
  }
  if (self.hasVersion) {
    [output writeInt32:2 value:self.version];
  }
  if (self.hasNickname) {
    [output writeString:3 value:self.nickname];
  }
  if (self.hasAvatarImg) {
    [output writeString:4 value:self.avatarImg];
  }
  if (self.hasSignature) {
    [output writeString:5 value:self.signature];
  }
  if (self.hasHobby) {
    [output writeString:6 value:self.hobby];
  }
  if (self.hasSex) {
    [output writeInt32:7 value:self.sex];
  }
  if (self.hasAge) {
    [output writeInt32:8 value:self.age];
  }
  if (self.hasConstellation) {
    [output writeInt32:9 value:self.constellation];
  }
  if (self.hasBirthday) {
    [output writeUInt64:10 value:self.birthday];
  }
  if (self.hasNation) {
    [output writeInt32:11 value:self.nation];
  }
  if (self.hasProvince) {
    [output writeInt32:12 value:self.province];
  }
  if (self.hasCity) {
    [output writeInt32:13 value:self.city];
  }
  if (self.hasTelephone) {
    [output writeUInt64:14 value:self.telephone];
  }
  if (self.hasCoin) {
    [output writeInt32:15 value:self.coin];
  }
  if (self.hasToken) {
    [output writeInt32:16 value:self.token];
  }
  if (self.hasLevel) {
    [output writeInt32:17 value:self.level];
  }
  if (self.hasCountry) {
    [output writeInt32:18 value:self.country];
  }
  if (self.hasResourceNum) {
    [output writeInt32:19 value:self.resourceNum];
  }
  if (self.hasPetNum) {
    [output writeInt32:20 value:self.petNum];
  }
  if (self.hasBagNum) {
    [output writeInt32:21 value:self.bagNum];
  }
  if (self.hasBloodType) {
    [output writeInt32:22 value:self.bloodType];
  }
  if (self.hasJob) {
    [output writeString:23 value:self.job];
  }
  for (PP_Pet *element in self.petsArray) {
    [output writeMessage:24 value:element];
  }
  for (PP_Task *element in self.tasksArray) {
    [output writeMessage:25 value:element];
  }
  if (self.hasAccTime) {
    [output writeMessage:26 value:self.accTime];
  }
  if (self.hasHomeLocation) {
    [output writeMessage:27 value:self.homeLocation];
  }
  if (self.hasLocation) {
    [output writeMessage:28 value:self.location];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeInt32Size(1, self.uid);
  }
  if (self.hasVersion) {
    size_ += computeInt32Size(2, self.version);
  }
  if (self.hasNickname) {
    size_ += computeStringSize(3, self.nickname);
  }
  if (self.hasAvatarImg) {
    size_ += computeStringSize(4, self.avatarImg);
  }
  if (self.hasSignature) {
    size_ += computeStringSize(5, self.signature);
  }
  if (self.hasHobby) {
    size_ += computeStringSize(6, self.hobby);
  }
  if (self.hasSex) {
    size_ += computeInt32Size(7, self.sex);
  }
  if (self.hasAge) {
    size_ += computeInt32Size(8, self.age);
  }
  if (self.hasConstellation) {
    size_ += computeInt32Size(9, self.constellation);
  }
  if (self.hasBirthday) {
    size_ += computeUInt64Size(10, self.birthday);
  }
  if (self.hasNation) {
    size_ += computeInt32Size(11, self.nation);
  }
  if (self.hasProvince) {
    size_ += computeInt32Size(12, self.province);
  }
  if (self.hasCity) {
    size_ += computeInt32Size(13, self.city);
  }
  if (self.hasTelephone) {
    size_ += computeUInt64Size(14, self.telephone);
  }
  if (self.hasCoin) {
    size_ += computeInt32Size(15, self.coin);
  }
  if (self.hasToken) {
    size_ += computeInt32Size(16, self.token);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(17, self.level);
  }
  if (self.hasCountry) {
    size_ += computeInt32Size(18, self.country);
  }
  if (self.hasResourceNum) {
    size_ += computeInt32Size(19, self.resourceNum);
  }
  if (self.hasPetNum) {
    size_ += computeInt32Size(20, self.petNum);
  }
  if (self.hasBagNum) {
    size_ += computeInt32Size(21, self.bagNum);
  }
  if (self.hasBloodType) {
    size_ += computeInt32Size(22, self.bloodType);
  }
  if (self.hasJob) {
    size_ += computeStringSize(23, self.job);
  }
  for (PP_Pet *element in self.petsArray) {
    size_ += computeMessageSize(24, element);
  }
  for (PP_Task *element in self.tasksArray) {
    size_ += computeMessageSize(25, element);
  }
  if (self.hasAccTime) {
    size_ += computeMessageSize(26, self.accTime);
  }
  if (self.hasHomeLocation) {
    size_ += computeMessageSize(27, self.homeLocation);
  }
  if (self.hasLocation) {
    size_ += computeMessageSize(28, self.location);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PP_CLUser*) parseFromData:(NSData*) data {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromData:data] build];
}
+ (PP_CLUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PP_CLUser*) parseFromInputStream:(NSInputStream*) input {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromInputStream:input] build];
}
+ (PP_CLUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_CLUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromCodedInputStream:input] build];
}
+ (PP_CLUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PP_CLUser*)[[[PP_CLUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PP_CLUser_Builder*) builder {
  return [[[PP_CLUser_Builder alloc] init] autorelease];
}
+ (PP_CLUser_Builder*) builderWithPrototype:(PP_CLUser*) prototype {
  return [[PP_CLUser builder] mergeFrom:prototype];
}
- (PP_CLUser_Builder*) builder {
  return [PP_CLUser builder];
}
- (PP_CLUser_Builder*) toBuilder {
  return [PP_CLUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", [NSNumber numberWithInt:self.uid]];
  }
  if (self.hasVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"version", [NSNumber numberWithInt:self.version]];
  }
  if (self.hasNickname) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nickname", self.nickname];
  }
  if (self.hasAvatarImg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarImg", self.avatarImg];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  if (self.hasHobby) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hobby", self.hobby];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", [NSNumber numberWithInt:self.sex]];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInt:self.age]];
  }
  if (self.hasConstellation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"constellation", [NSNumber numberWithInt:self.constellation]];
  }
  if (self.hasBirthday) {
    [output appendFormat:@"%@%@: %@\n", indent, @"birthday", [NSNumber numberWithLongLong:self.birthday]];
  }
  if (self.hasNation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nation", [NSNumber numberWithInt:self.nation]];
  }
  if (self.hasProvince) {
    [output appendFormat:@"%@%@: %@\n", indent, @"province", [NSNumber numberWithInt:self.province]];
  }
  if (self.hasCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"city", [NSNumber numberWithInt:self.city]];
  }
  if (self.hasTelephone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"telephone", [NSNumber numberWithLongLong:self.telephone]];
  }
  if (self.hasCoin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coin", [NSNumber numberWithInt:self.coin]];
  }
  if (self.hasToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"token", [NSNumber numberWithInt:self.token]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInt:self.level]];
  }
  if (self.hasCountry) {
    [output appendFormat:@"%@%@: %@\n", indent, @"country", [NSNumber numberWithInt:self.country]];
  }
  if (self.hasResourceNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resourceNum", [NSNumber numberWithInt:self.resourceNum]];
  }
  if (self.hasPetNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"petNum", [NSNumber numberWithInt:self.petNum]];
  }
  if (self.hasBagNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bagNum", [NSNumber numberWithInt:self.bagNum]];
  }
  if (self.hasBloodType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bloodType", [NSNumber numberWithInt:self.bloodType]];
  }
  if (self.hasJob) {
    [output appendFormat:@"%@%@: %@\n", indent, @"job", self.job];
  }
  for (PP_Pet* element in self.petsArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"pets"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (PP_Task* element in self.tasksArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"tasks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAccTime) {
    [output appendFormat:@"%@%@ {\n", indent, @"accTime"];
    [self.accTime writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHomeLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"homeLocation"];
    [self.homeLocation writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@ {\n", indent, @"location"];
    [self.location writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PP_CLUser class]]) {
    return NO;
  }
  PP_CLUser *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || self.uid == otherMessage.uid) &&
      self.hasVersion == otherMessage.hasVersion &&
      (!self.hasVersion || self.version == otherMessage.version) &&
      self.hasNickname == otherMessage.hasNickname &&
      (!self.hasNickname || [self.nickname isEqual:otherMessage.nickname]) &&
      self.hasAvatarImg == otherMessage.hasAvatarImg &&
      (!self.hasAvatarImg || [self.avatarImg isEqual:otherMessage.avatarImg]) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      self.hasHobby == otherMessage.hasHobby &&
      (!self.hasHobby || [self.hobby isEqual:otherMessage.hobby]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || self.sex == otherMessage.sex) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      self.hasConstellation == otherMessage.hasConstellation &&
      (!self.hasConstellation || self.constellation == otherMessage.constellation) &&
      self.hasBirthday == otherMessage.hasBirthday &&
      (!self.hasBirthday || self.birthday == otherMessage.birthday) &&
      self.hasNation == otherMessage.hasNation &&
      (!self.hasNation || self.nation == otherMessage.nation) &&
      self.hasProvince == otherMessage.hasProvince &&
      (!self.hasProvince || self.province == otherMessage.province) &&
      self.hasCity == otherMessage.hasCity &&
      (!self.hasCity || self.city == otherMessage.city) &&
      self.hasTelephone == otherMessage.hasTelephone &&
      (!self.hasTelephone || self.telephone == otherMessage.telephone) &&
      self.hasCoin == otherMessage.hasCoin &&
      (!self.hasCoin || self.coin == otherMessage.coin) &&
      self.hasToken == otherMessage.hasToken &&
      (!self.hasToken || self.token == otherMessage.token) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasCountry == otherMessage.hasCountry &&
      (!self.hasCountry || self.country == otherMessage.country) &&
      self.hasResourceNum == otherMessage.hasResourceNum &&
      (!self.hasResourceNum || self.resourceNum == otherMessage.resourceNum) &&
      self.hasPetNum == otherMessage.hasPetNum &&
      (!self.hasPetNum || self.petNum == otherMessage.petNum) &&
      self.hasBagNum == otherMessage.hasBagNum &&
      (!self.hasBagNum || self.bagNum == otherMessage.bagNum) &&
      self.hasBloodType == otherMessage.hasBloodType &&
      (!self.hasBloodType || self.bloodType == otherMessage.bloodType) &&
      self.hasJob == otherMessage.hasJob &&
      (!self.hasJob || [self.job isEqual:otherMessage.job]) &&
      [self.petsArray isEqualToArray:otherMessage.petsArray] &&
      [self.tasksArray isEqualToArray:otherMessage.tasksArray] &&
      self.hasAccTime == otherMessage.hasAccTime &&
      (!self.hasAccTime || [self.accTime isEqual:otherMessage.accTime]) &&
      self.hasHomeLocation == otherMessage.hasHomeLocation &&
      (!self.hasHomeLocation || [self.homeLocation isEqual:otherMessage.homeLocation]) &&
      self.hasLocation == otherMessage.hasLocation &&
      (!self.hasLocation || [self.location isEqual:otherMessage.location]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.uid] hash];
  }
  if (self.hasVersion) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.version] hash];
  }
  if (self.hasNickname) {
    hashCode = hashCode * 31 + [self.nickname hash];
  }
  if (self.hasAvatarImg) {
    hashCode = hashCode * 31 + [self.avatarImg hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  if (self.hasHobby) {
    hashCode = hashCode * 31 + [self.hobby hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.sex] hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.age] hash];
  }
  if (self.hasConstellation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.constellation] hash];
  }
  if (self.hasBirthday) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.birthday] hash];
  }
  if (self.hasNation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.nation] hash];
  }
  if (self.hasProvince) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.province] hash];
  }
  if (self.hasCity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.city] hash];
  }
  if (self.hasTelephone) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.telephone] hash];
  }
  if (self.hasCoin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.coin] hash];
  }
  if (self.hasToken) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.token] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.level] hash];
  }
  if (self.hasCountry) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.country] hash];
  }
  if (self.hasResourceNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.resourceNum] hash];
  }
  if (self.hasPetNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.petNum] hash];
  }
  if (self.hasBagNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bagNum] hash];
  }
  if (self.hasBloodType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.bloodType] hash];
  }
  if (self.hasJob) {
    hashCode = hashCode * 31 + [self.job hash];
  }
  for (PP_Pet* element in self.petsArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (PP_Task* element in self.tasksArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasAccTime) {
    hashCode = hashCode * 31 + [self.accTime hash];
  }
  if (self.hasHomeLocation) {
    hashCode = hashCode * 31 + [self.homeLocation hash];
  }
  if (self.hasLocation) {
    hashCode = hashCode * 31 + [self.location hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PP_CLUser_Builder()
@property (retain) PP_CLUser* result;
@end

@implementation PP_CLUser_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PP_CLUser alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PP_CLUser_Builder*) clear {
  self.result = [[[PP_CLUser alloc] init] autorelease];
  return self;
}
- (PP_CLUser_Builder*) clone {
  return [PP_CLUser builderWithPrototype:result];
}
- (PP_CLUser*) defaultInstance {
  return [PP_CLUser defaultInstance];
}
- (PP_CLUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PP_CLUser*) buildPartial {
  PP_CLUser* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PP_CLUser_Builder*) mergeFrom:(PP_CLUser*) other {
  if (other == [PP_CLUser defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasVersion) {
    [self setVersion:other.version];
  }
  if (other.hasNickname) {
    [self setNickname:other.nickname];
  }
  if (other.hasAvatarImg) {
    [self setAvatarImg:other.avatarImg];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  if (other.hasHobby) {
    [self setHobby:other.hobby];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  if (other.hasConstellation) {
    [self setConstellation:other.constellation];
  }
  if (other.hasBirthday) {
    [self setBirthday:other.birthday];
  }
  if (other.hasNation) {
    [self setNation:other.nation];
  }
  if (other.hasProvince) {
    [self setProvince:other.province];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasTelephone) {
    [self setTelephone:other.telephone];
  }
  if (other.hasCoin) {
    [self setCoin:other.coin];
  }
  if (other.hasToken) {
    [self setToken:other.token];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasResourceNum) {
    [self setResourceNum:other.resourceNum];
  }
  if (other.hasPetNum) {
    [self setPetNum:other.petNum];
  }
  if (other.hasBagNum) {
    [self setBagNum:other.bagNum];
  }
  if (other.hasBloodType) {
    [self setBloodType:other.bloodType];
  }
  if (other.hasJob) {
    [self setJob:other.job];
  }
  if (other.petsArray.count > 0) {
    if (result.petsArray == nil) {
      result.petsArray = [[other.petsArray copyWithZone:[other.petsArray zone]] autorelease];
    } else {
      [result.petsArray appendArray:other.petsArray];
    }
  }
  if (other.tasksArray.count > 0) {
    if (result.tasksArray == nil) {
      result.tasksArray = [[other.tasksArray copyWithZone:[other.tasksArray zone]] autorelease];
    } else {
      [result.tasksArray appendArray:other.tasksArray];
    }
  }
  if (other.hasAccTime) {
    [self mergeAccTime:other.accTime];
  }
  if (other.hasHomeLocation) {
    [self mergeHomeLocation:other.homeLocation];
  }
  if (other.hasLocation) {
    [self mergeLocation:other.location];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PP_CLUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PP_CLUser_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUid:[input readInt32]];
        break;
      }
      case 16: {
        [self setVersion:[input readInt32]];
        break;
      }
      case 26: {
        [self setNickname:[input readString]];
        break;
      }
      case 34: {
        [self setAvatarImg:[input readString]];
        break;
      }
      case 42: {
        [self setSignature:[input readString]];
        break;
      }
      case 50: {
        [self setHobby:[input readString]];
        break;
      }
      case 56: {
        [self setSex:[input readInt32]];
        break;
      }
      case 64: {
        [self setAge:[input readInt32]];
        break;
      }
      case 72: {
        [self setConstellation:[input readInt32]];
        break;
      }
      case 80: {
        [self setBirthday:[input readUInt64]];
        break;
      }
      case 88: {
        [self setNation:[input readInt32]];
        break;
      }
      case 96: {
        [self setProvince:[input readInt32]];
        break;
      }
      case 104: {
        [self setCity:[input readInt32]];
        break;
      }
      case 112: {
        [self setTelephone:[input readUInt64]];
        break;
      }
      case 120: {
        [self setCoin:[input readInt32]];
        break;
      }
      case 128: {
        [self setToken:[input readInt32]];
        break;
      }
      case 136: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 144: {
        [self setCountry:[input readInt32]];
        break;
      }
      case 152: {
        [self setResourceNum:[input readInt32]];
        break;
      }
      case 160: {
        [self setPetNum:[input readInt32]];
        break;
      }
      case 168: {
        [self setBagNum:[input readInt32]];
        break;
      }
      case 176: {
        [self setBloodType:[input readInt32]];
        break;
      }
      case 186: {
        [self setJob:[input readString]];
        break;
      }
      case 194: {
        PP_Pet_Builder* subBuilder = [PP_Pet builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPets:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        PP_Task_Builder* subBuilder = [PP_Task builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTasks:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        PP_AccTime_Builder* subBuilder = [PP_AccTime builder];
        if (self.hasAccTime) {
          [subBuilder mergeFrom:self.accTime];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAccTime:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        PP_Location_Builder* subBuilder = [PP_Location builder];
        if (self.hasHomeLocation) {
          [subBuilder mergeFrom:self.homeLocation];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHomeLocation:[subBuilder buildPartial]];
        break;
      }
      case 226: {
        PP_Location_Builder* subBuilder = [PP_Location builder];
        if (self.hasLocation) {
          [subBuilder mergeFrom:self.location];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLocation:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return result.hasUid;
}
- (int32_t) uid {
  return result.uid;
}
- (PP_CLUser_Builder*) setUid:(int32_t) value {
  result.hasUid = YES;
  result.uid = value;
  return self;
}
- (PP_CLUser_Builder*) clearUid {
  result.hasUid = NO;
  result.uid = 0;
  return self;
}
- (BOOL) hasVersion {
  return result.hasVersion;
}
- (int32_t) version {
  return result.version;
}
- (PP_CLUser_Builder*) setVersion:(int32_t) value {
  result.hasVersion = YES;
  result.version = value;
  return self;
}
- (PP_CLUser_Builder*) clearVersion {
  result.hasVersion = NO;
  result.version = 0;
  return self;
}
- (BOOL) hasNickname {
  return result.hasNickname;
}
- (NSString*) nickname {
  return result.nickname;
}
- (PP_CLUser_Builder*) setNickname:(NSString*) value {
  result.hasNickname = YES;
  result.nickname = value;
  return self;
}
- (PP_CLUser_Builder*) clearNickname {
  result.hasNickname = NO;
  result.nickname = @"";
  return self;
}
- (BOOL) hasAvatarImg {
  return result.hasAvatarImg;
}
- (NSString*) avatarImg {
  return result.avatarImg;
}
- (PP_CLUser_Builder*) setAvatarImg:(NSString*) value {
  result.hasAvatarImg = YES;
  result.avatarImg = value;
  return self;
}
- (PP_CLUser_Builder*) clearAvatarImg {
  result.hasAvatarImg = NO;
  result.avatarImg = @"";
  return self;
}
- (BOOL) hasSignature {
  return result.hasSignature;
}
- (NSString*) signature {
  return result.signature;
}
- (PP_CLUser_Builder*) setSignature:(NSString*) value {
  result.hasSignature = YES;
  result.signature = value;
  return self;
}
- (PP_CLUser_Builder*) clearSignature {
  result.hasSignature = NO;
  result.signature = @"";
  return self;
}
- (BOOL) hasHobby {
  return result.hasHobby;
}
- (NSString*) hobby {
  return result.hobby;
}
- (PP_CLUser_Builder*) setHobby:(NSString*) value {
  result.hasHobby = YES;
  result.hobby = value;
  return self;
}
- (PP_CLUser_Builder*) clearHobby {
  result.hasHobby = NO;
  result.hobby = @"";
  return self;
}
- (BOOL) hasSex {
  return result.hasSex;
}
- (int32_t) sex {
  return result.sex;
}
- (PP_CLUser_Builder*) setSex:(int32_t) value {
  result.hasSex = YES;
  result.sex = value;
  return self;
}
- (PP_CLUser_Builder*) clearSex {
  result.hasSex = NO;
  result.sex = 0;
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (int32_t) age {
  return result.age;
}
- (PP_CLUser_Builder*) setAge:(int32_t) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (PP_CLUser_Builder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
- (BOOL) hasConstellation {
  return result.hasConstellation;
}
- (int32_t) constellation {
  return result.constellation;
}
- (PP_CLUser_Builder*) setConstellation:(int32_t) value {
  result.hasConstellation = YES;
  result.constellation = value;
  return self;
}
- (PP_CLUser_Builder*) clearConstellation {
  result.hasConstellation = NO;
  result.constellation = 0;
  return self;
}
- (BOOL) hasBirthday {
  return result.hasBirthday;
}
- (uint64_t) birthday {
  return result.birthday;
}
- (PP_CLUser_Builder*) setBirthday:(uint64_t) value {
  result.hasBirthday = YES;
  result.birthday = value;
  return self;
}
- (PP_CLUser_Builder*) clearBirthday {
  result.hasBirthday = NO;
  result.birthday = 0L;
  return self;
}
- (BOOL) hasNation {
  return result.hasNation;
}
- (int32_t) nation {
  return result.nation;
}
- (PP_CLUser_Builder*) setNation:(int32_t) value {
  result.hasNation = YES;
  result.nation = value;
  return self;
}
- (PP_CLUser_Builder*) clearNation {
  result.hasNation = NO;
  result.nation = 0;
  return self;
}
- (BOOL) hasProvince {
  return result.hasProvince;
}
- (int32_t) province {
  return result.province;
}
- (PP_CLUser_Builder*) setProvince:(int32_t) value {
  result.hasProvince = YES;
  result.province = value;
  return self;
}
- (PP_CLUser_Builder*) clearProvince {
  result.hasProvince = NO;
  result.province = 0;
  return self;
}
- (BOOL) hasCity {
  return result.hasCity;
}
- (int32_t) city {
  return result.city;
}
- (PP_CLUser_Builder*) setCity:(int32_t) value {
  result.hasCity = YES;
  result.city = value;
  return self;
}
- (PP_CLUser_Builder*) clearCity {
  result.hasCity = NO;
  result.city = 0;
  return self;
}
- (BOOL) hasTelephone {
  return result.hasTelephone;
}
- (uint64_t) telephone {
  return result.telephone;
}
- (PP_CLUser_Builder*) setTelephone:(uint64_t) value {
  result.hasTelephone = YES;
  result.telephone = value;
  return self;
}
- (PP_CLUser_Builder*) clearTelephone {
  result.hasTelephone = NO;
  result.telephone = 0L;
  return self;
}
- (BOOL) hasCoin {
  return result.hasCoin;
}
- (int32_t) coin {
  return result.coin;
}
- (PP_CLUser_Builder*) setCoin:(int32_t) value {
  result.hasCoin = YES;
  result.coin = value;
  return self;
}
- (PP_CLUser_Builder*) clearCoin {
  result.hasCoin = NO;
  result.coin = 0;
  return self;
}
- (BOOL) hasToken {
  return result.hasToken;
}
- (int32_t) token {
  return result.token;
}
- (PP_CLUser_Builder*) setToken:(int32_t) value {
  result.hasToken = YES;
  result.token = value;
  return self;
}
- (PP_CLUser_Builder*) clearToken {
  result.hasToken = NO;
  result.token = 0;
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (PP_CLUser_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (PP_CLUser_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasCountry {
  return result.hasCountry;
}
- (int32_t) country {
  return result.country;
}
- (PP_CLUser_Builder*) setCountry:(int32_t) value {
  result.hasCountry = YES;
  result.country = value;
  return self;
}
- (PP_CLUser_Builder*) clearCountry {
  result.hasCountry = NO;
  result.country = 0;
  return self;
}
- (BOOL) hasResourceNum {
  return result.hasResourceNum;
}
- (int32_t) resourceNum {
  return result.resourceNum;
}
- (PP_CLUser_Builder*) setResourceNum:(int32_t) value {
  result.hasResourceNum = YES;
  result.resourceNum = value;
  return self;
}
- (PP_CLUser_Builder*) clearResourceNum {
  result.hasResourceNum = NO;
  result.resourceNum = 0;
  return self;
}
- (BOOL) hasPetNum {
  return result.hasPetNum;
}
- (int32_t) petNum {
  return result.petNum;
}
- (PP_CLUser_Builder*) setPetNum:(int32_t) value {
  result.hasPetNum = YES;
  result.petNum = value;
  return self;
}
- (PP_CLUser_Builder*) clearPetNum {
  result.hasPetNum = NO;
  result.petNum = 0;
  return self;
}
- (BOOL) hasBagNum {
  return result.hasBagNum;
}
- (int32_t) bagNum {
  return result.bagNum;
}
- (PP_CLUser_Builder*) setBagNum:(int32_t) value {
  result.hasBagNum = YES;
  result.bagNum = value;
  return self;
}
- (PP_CLUser_Builder*) clearBagNum {
  result.hasBagNum = NO;
  result.bagNum = 0;
  return self;
}
- (BOOL) hasBloodType {
  return result.hasBloodType;
}
- (int32_t) bloodType {
  return result.bloodType;
}
- (PP_CLUser_Builder*) setBloodType:(int32_t) value {
  result.hasBloodType = YES;
  result.bloodType = value;
  return self;
}
- (PP_CLUser_Builder*) clearBloodType {
  result.hasBloodType = NO;
  result.bloodType = 0;
  return self;
}
- (BOOL) hasJob {
  return result.hasJob;
}
- (NSString*) job {
  return result.job;
}
- (PP_CLUser_Builder*) setJob:(NSString*) value {
  result.hasJob = YES;
  result.job = value;
  return self;
}
- (PP_CLUser_Builder*) clearJob {
  result.hasJob = NO;
  result.job = @"";
  return self;
}
- (PBAppendableArray *)pets {
  return result.petsArray;
}
- (PP_Pet*)petsAtIndex:(NSUInteger)index {
  return [result petsAtIndex:index];
}
- (PP_CLUser_Builder *)addPets:(PP_Pet*)value {
  if (result.petsArray == nil) {
    result.petsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.petsArray addObject:value];
  return self;
}
- (PP_CLUser_Builder *)setPetsArray:(NSArray *)array {
  result.petsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_CLUser_Builder *)setPetsValues:(const PP_Pet* *)values count:(NSUInteger)count {
  result.petsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_CLUser_Builder *)clearPets {
  result.petsArray = nil;
  return self;
}
- (PBAppendableArray *)tasks {
  return result.tasksArray;
}
- (PP_Task*)tasksAtIndex:(NSUInteger)index {
  return [result tasksAtIndex:index];
}
- (PP_CLUser_Builder *)addTasks:(PP_Task*)value {
  if (result.tasksArray == nil) {
    result.tasksArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeObject];
  }
  [result.tasksArray addObject:value];
  return self;
}
- (PP_CLUser_Builder *)setTasksArray:(NSArray *)array {
  result.tasksArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_CLUser_Builder *)setTasksValues:(const PP_Task* *)values count:(NSUInteger)count {
  result.tasksArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeObject];
  return self;
}
- (PP_CLUser_Builder *)clearTasks {
  result.tasksArray = nil;
  return self;
}
- (BOOL) hasAccTime {
  return result.hasAccTime;
}
- (PP_AccTime*) accTime {
  return result.accTime;
}
- (PP_CLUser_Builder*) setAccTime:(PP_AccTime*) value {
  result.hasAccTime = YES;
  result.accTime = value;
  return self;
}
- (PP_CLUser_Builder*) setAccTimeBuilder:(PP_AccTime_Builder*) builderForValue {
  return [self setAccTime:[builderForValue build]];
}
- (PP_CLUser_Builder*) mergeAccTime:(PP_AccTime*) value {
  if (result.hasAccTime &&
      result.accTime != [PP_AccTime defaultInstance]) {
    result.accTime =
      [[[PP_AccTime builderWithPrototype:result.accTime] mergeFrom:value] buildPartial];
  } else {
    result.accTime = value;
  }
  result.hasAccTime = YES;
  return self;
}
- (PP_CLUser_Builder*) clearAccTime {
  result.hasAccTime = NO;
  result.accTime = [PP_AccTime defaultInstance];
  return self;
}
- (BOOL) hasHomeLocation {
  return result.hasHomeLocation;
}
- (PP_Location*) homeLocation {
  return result.homeLocation;
}
- (PP_CLUser_Builder*) setHomeLocation:(PP_Location*) value {
  result.hasHomeLocation = YES;
  result.homeLocation = value;
  return self;
}
- (PP_CLUser_Builder*) setHomeLocationBuilder:(PP_Location_Builder*) builderForValue {
  return [self setHomeLocation:[builderForValue build]];
}
- (PP_CLUser_Builder*) mergeHomeLocation:(PP_Location*) value {
  if (result.hasHomeLocation &&
      result.homeLocation != [PP_Location defaultInstance]) {
    result.homeLocation =
      [[[PP_Location builderWithPrototype:result.homeLocation] mergeFrom:value] buildPartial];
  } else {
    result.homeLocation = value;
  }
  result.hasHomeLocation = YES;
  return self;
}
- (PP_CLUser_Builder*) clearHomeLocation {
  result.hasHomeLocation = NO;
  result.homeLocation = [PP_Location defaultInstance];
  return self;
}
- (BOOL) hasLocation {
  return result.hasLocation;
}
- (PP_Location*) location {
  return result.location;
}
- (PP_CLUser_Builder*) setLocation:(PP_Location*) value {
  result.hasLocation = YES;
  result.location = value;
  return self;
}
- (PP_CLUser_Builder*) setLocationBuilder:(PP_Location_Builder*) builderForValue {
  return [self setLocation:[builderForValue build]];
}
- (PP_CLUser_Builder*) mergeLocation:(PP_Location*) value {
  if (result.hasLocation &&
      result.location != [PP_Location defaultInstance]) {
    result.location =
      [[[PP_Location builderWithPrototype:result.location] mergeFrom:value] buildPartial];
  } else {
    result.location = value;
  }
  result.hasLocation = YES;
  return self;
}
- (PP_CLUser_Builder*) clearLocation {
  result.hasLocation = NO;
  result.location = [PP_Location defaultInstance];
  return self;
}
@end

